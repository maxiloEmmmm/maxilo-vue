(function (global, factory) {
	typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('vue'), require('vue-router'), require('vuex'), require('vue-i18n'), require('axios')) :
	typeof define === 'function' && define.amd ? define(['vue', 'vue-router', 'vuex', 'vue-i18n', 'axios'], factory) :
	(global = typeof globalThis !== 'undefined' ? globalThis : global || self, global.maxiloVue = factory(global.Vue, global.VueRouter, global.Vuex, global.VueI18n, global.axios));
}(this, (function (Vue, VueRouter, Vuex, VueI18n, axios) { 'use strict';

	Vue = Vue && Object.prototype.hasOwnProperty.call(Vue, 'default') ? Vue['default'] : Vue;
	VueRouter = VueRouter && Object.prototype.hasOwnProperty.call(VueRouter, 'default') ? VueRouter['default'] : VueRouter;
	Vuex = Vuex && Object.prototype.hasOwnProperty.call(Vuex, 'default') ? Vuex['default'] : Vuex;
	VueI18n = VueI18n && Object.prototype.hasOwnProperty.call(VueI18n, 'default') ? VueI18n['default'] : VueI18n;
	axios = axios && Object.prototype.hasOwnProperty.call(axios, 'default') ? axios['default'] : axios;

	var commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};

	function createCommonjsModule(fn, module) {
		return module = { exports: {} }, fn(module, module.exports), module.exports;
	}

	var check = function (it) {
	  return it && it.Math == Math && it;
	};

	// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028
	var global_1 =
	  // eslint-disable-next-line no-undef
	  check(typeof globalThis == 'object' && globalThis) ||
	  check(typeof window == 'object' && window) ||
	  check(typeof self == 'object' && self) ||
	  check(typeof commonjsGlobal == 'object' && commonjsGlobal) ||
	  // eslint-disable-next-line no-new-func
	  Function('return this')();

	var fails = function (exec) {
	  try {
	    return !!exec();
	  } catch (error) {
	    return true;
	  }
	};

	// Thank's IE8 for his funny defineProperty
	var descriptors = !fails(function () {
	  return Object.defineProperty({}, 1, { get: function () { return 7; } })[1] != 7;
	});

	var nativePropertyIsEnumerable = {}.propertyIsEnumerable;
	var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

	// Nashorn ~ JDK8 bug
	var NASHORN_BUG = getOwnPropertyDescriptor && !nativePropertyIsEnumerable.call({ 1: 2 }, 1);

	// `Object.prototype.propertyIsEnumerable` method implementation
	// https://tc39.github.io/ecma262/#sec-object.prototype.propertyisenumerable
	var f = NASHORN_BUG ? function propertyIsEnumerable(V) {
	  var descriptor = getOwnPropertyDescriptor(this, V);
	  return !!descriptor && descriptor.enumerable;
	} : nativePropertyIsEnumerable;

	var objectPropertyIsEnumerable = {
		f: f
	};

	var createPropertyDescriptor = function (bitmap, value) {
	  return {
	    enumerable: !(bitmap & 1),
	    configurable: !(bitmap & 2),
	    writable: !(bitmap & 4),
	    value: value
	  };
	};

	var toString = {}.toString;

	var classofRaw = function (it) {
	  return toString.call(it).slice(8, -1);
	};

	var split = ''.split;

	// fallback for non-array-like ES3 and non-enumerable old V8 strings
	var indexedObject = fails(function () {
	  // throws an error in rhino, see https://github.com/mozilla/rhino/issues/346
	  // eslint-disable-next-line no-prototype-builtins
	  return !Object('z').propertyIsEnumerable(0);
	}) ? function (it) {
	  return classofRaw(it) == 'String' ? split.call(it, '') : Object(it);
	} : Object;

	// `RequireObjectCoercible` abstract operation
	// https://tc39.github.io/ecma262/#sec-requireobjectcoercible
	var requireObjectCoercible = function (it) {
	  if (it == undefined) throw TypeError("Can't call method on " + it);
	  return it;
	};

	// toObject with fallback for non-array-like ES3 strings



	var toIndexedObject = function (it) {
	  return indexedObject(requireObjectCoercible(it));
	};

	var isObject = function (it) {
	  return typeof it === 'object' ? it !== null : typeof it === 'function';
	};

	// `ToPrimitive` abstract operation
	// https://tc39.github.io/ecma262/#sec-toprimitive
	// instead of the ES6 spec version, we didn't implement @@toPrimitive case
	// and the second argument - flag - preferred type is a string
	var toPrimitive = function (input, PREFERRED_STRING) {
	  if (!isObject(input)) return input;
	  var fn, val;
	  if (PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
	  if (typeof (fn = input.valueOf) == 'function' && !isObject(val = fn.call(input))) return val;
	  if (!PREFERRED_STRING && typeof (fn = input.toString) == 'function' && !isObject(val = fn.call(input))) return val;
	  throw TypeError("Can't convert object to primitive value");
	};

	var hasOwnProperty = {}.hasOwnProperty;

	var has = function (it, key) {
	  return hasOwnProperty.call(it, key);
	};

	var document$1 = global_1.document;
	// typeof document.createElement is 'object' in old IE
	var EXISTS = isObject(document$1) && isObject(document$1.createElement);

	var documentCreateElement = function (it) {
	  return EXISTS ? document$1.createElement(it) : {};
	};

	// Thank's IE8 for his funny defineProperty
	var ie8DomDefine = !descriptors && !fails(function () {
	  return Object.defineProperty(documentCreateElement('div'), 'a', {
	    get: function () { return 7; }
	  }).a != 7;
	});

	var nativeGetOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;

	// `Object.getOwnPropertyDescriptor` method
	// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor
	var f$1 = descriptors ? nativeGetOwnPropertyDescriptor : function getOwnPropertyDescriptor(O, P) {
	  O = toIndexedObject(O);
	  P = toPrimitive(P, true);
	  if (ie8DomDefine) try {
	    return nativeGetOwnPropertyDescriptor(O, P);
	  } catch (error) { /* empty */ }
	  if (has(O, P)) return createPropertyDescriptor(!objectPropertyIsEnumerable.f.call(O, P), O[P]);
	};

	var objectGetOwnPropertyDescriptor = {
		f: f$1
	};

	var replacement = /#|\.prototype\./;

	var isForced = function (feature, detection) {
	  var value = data[normalize(feature)];
	  return value == POLYFILL ? true
	    : value == NATIVE ? false
	    : typeof detection == 'function' ? fails(detection)
	    : !!detection;
	};

	var normalize = isForced.normalize = function (string) {
	  return String(string).replace(replacement, '.').toLowerCase();
	};

	var data = isForced.data = {};
	var NATIVE = isForced.NATIVE = 'N';
	var POLYFILL = isForced.POLYFILL = 'P';

	var isForced_1 = isForced;

	var path = {};

	var aFunction = function (it) {
	  if (typeof it != 'function') {
	    throw TypeError(String(it) + ' is not a function');
	  } return it;
	};

	// optional / simple context binding
	var functionBindContext = function (fn, that, length) {
	  aFunction(fn);
	  if (that === undefined) return fn;
	  switch (length) {
	    case 0: return function () {
	      return fn.call(that);
	    };
	    case 1: return function (a) {
	      return fn.call(that, a);
	    };
	    case 2: return function (a, b) {
	      return fn.call(that, a, b);
	    };
	    case 3: return function (a, b, c) {
	      return fn.call(that, a, b, c);
	    };
	  }
	  return function (/* ...args */) {
	    return fn.apply(that, arguments);
	  };
	};

	var anObject = function (it) {
	  if (!isObject(it)) {
	    throw TypeError(String(it) + ' is not an object');
	  } return it;
	};

	var nativeDefineProperty = Object.defineProperty;

	// `Object.defineProperty` method
	// https://tc39.github.io/ecma262/#sec-object.defineproperty
	var f$2 = descriptors ? nativeDefineProperty : function defineProperty(O, P, Attributes) {
	  anObject(O);
	  P = toPrimitive(P, true);
	  anObject(Attributes);
	  if (ie8DomDefine) try {
	    return nativeDefineProperty(O, P, Attributes);
	  } catch (error) { /* empty */ }
	  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported');
	  if ('value' in Attributes) O[P] = Attributes.value;
	  return O;
	};

	var objectDefineProperty = {
		f: f$2
	};

	var createNonEnumerableProperty = descriptors ? function (object, key, value) {
	  return objectDefineProperty.f(object, key, createPropertyDescriptor(1, value));
	} : function (object, key, value) {
	  object[key] = value;
	  return object;
	};

	var getOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;






	var wrapConstructor = function (NativeConstructor) {
	  var Wrapper = function (a, b, c) {
	    if (this instanceof NativeConstructor) {
	      switch (arguments.length) {
	        case 0: return new NativeConstructor();
	        case 1: return new NativeConstructor(a);
	        case 2: return new NativeConstructor(a, b);
	      } return new NativeConstructor(a, b, c);
	    } return NativeConstructor.apply(this, arguments);
	  };
	  Wrapper.prototype = NativeConstructor.prototype;
	  return Wrapper;
	};

	/*
	  options.target      - name of the target object
	  options.global      - target is the global object
	  options.stat        - export as static methods of target
	  options.proto       - export as prototype methods of target
	  options.real        - real prototype method for the `pure` version
	  options.forced      - export even if the native feature is available
	  options.bind        - bind methods to the target, required for the `pure` version
	  options.wrap        - wrap constructors to preventing global pollution, required for the `pure` version
	  options.unsafe      - use the simple assignment of property instead of delete + defineProperty
	  options.sham        - add a flag to not completely full polyfills
	  options.enumerable  - export as enumerable property
	  options.noTargetGet - prevent calling a getter on target
	*/
	var _export = function (options, source) {
	  var TARGET = options.target;
	  var GLOBAL = options.global;
	  var STATIC = options.stat;
	  var PROTO = options.proto;

	  var nativeSource = GLOBAL ? global_1 : STATIC ? global_1[TARGET] : (global_1[TARGET] || {}).prototype;

	  var target = GLOBAL ? path : path[TARGET] || (path[TARGET] = {});
	  var targetPrototype = target.prototype;

	  var FORCED, USE_NATIVE, VIRTUAL_PROTOTYPE;
	  var key, sourceProperty, targetProperty, nativeProperty, resultProperty, descriptor;

	  for (key in source) {
	    FORCED = isForced_1(GLOBAL ? key : TARGET + (STATIC ? '.' : '#') + key, options.forced);
	    // contains in native
	    USE_NATIVE = !FORCED && nativeSource && has(nativeSource, key);

	    targetProperty = target[key];

	    if (USE_NATIVE) if (options.noTargetGet) {
	      descriptor = getOwnPropertyDescriptor$1(nativeSource, key);
	      nativeProperty = descriptor && descriptor.value;
	    } else nativeProperty = nativeSource[key];

	    // export native or implementation
	    sourceProperty = (USE_NATIVE && nativeProperty) ? nativeProperty : source[key];

	    if (USE_NATIVE && typeof targetProperty === typeof sourceProperty) continue;

	    // bind timers to global for call from export context
	    if (options.bind && USE_NATIVE) resultProperty = functionBindContext(sourceProperty, global_1);
	    // wrap global constructors for prevent changs in this version
	    else if (options.wrap && USE_NATIVE) resultProperty = wrapConstructor(sourceProperty);
	    // make static versions for prototype methods
	    else if (PROTO && typeof sourceProperty == 'function') resultProperty = functionBindContext(Function.call, sourceProperty);
	    // default case
	    else resultProperty = sourceProperty;

	    // add a flag to not completely full polyfills
	    if (options.sham || (sourceProperty && sourceProperty.sham) || (targetProperty && targetProperty.sham)) {
	      createNonEnumerableProperty(resultProperty, 'sham', true);
	    }

	    target[key] = resultProperty;

	    if (PROTO) {
	      VIRTUAL_PROTOTYPE = TARGET + 'Prototype';
	      if (!has(path, VIRTUAL_PROTOTYPE)) {
	        createNonEnumerableProperty(path, VIRTUAL_PROTOTYPE, {});
	      }
	      // export virtual prototype methods
	      path[VIRTUAL_PROTOTYPE][key] = sourceProperty;
	      // export real prototype methods
	      if (options.real && targetPrototype && !targetPrototype[key]) {
	        createNonEnumerableProperty(targetPrototype, key, sourceProperty);
	      }
	    }
	  }
	};

	var ceil = Math.ceil;
	var floor = Math.floor;

	// `ToInteger` abstract operation
	// https://tc39.github.io/ecma262/#sec-tointeger
	var toInteger = function (argument) {
	  return isNaN(argument = +argument) ? 0 : (argument > 0 ? floor : ceil)(argument);
	};

	var min = Math.min;

	// `ToLength` abstract operation
	// https://tc39.github.io/ecma262/#sec-tolength
	var toLength = function (argument) {
	  return argument > 0 ? min(toInteger(argument), 0x1FFFFFFFFFFFFF) : 0; // 2 ** 53 - 1 == 9007199254740991
	};

	var max = Math.max;
	var min$1 = Math.min;

	// Helper for a popular repeating case of the spec:
	// Let integer be ? ToInteger(index).
	// If integer < 0, let result be max((length + integer), 0); else let result be min(integer, length).
	var toAbsoluteIndex = function (index, length) {
	  var integer = toInteger(index);
	  return integer < 0 ? max(integer + length, 0) : min$1(integer, length);
	};

	// `Array.prototype.{ indexOf, includes }` methods implementation
	var createMethod = function (IS_INCLUDES) {
	  return function ($this, el, fromIndex) {
	    var O = toIndexedObject($this);
	    var length = toLength(O.length);
	    var index = toAbsoluteIndex(fromIndex, length);
	    var value;
	    // Array#includes uses SameValueZero equality algorithm
	    // eslint-disable-next-line no-self-compare
	    if (IS_INCLUDES && el != el) while (length > index) {
	      value = O[index++];
	      // eslint-disable-next-line no-self-compare
	      if (value != value) return true;
	    // Array#indexOf ignores holes, Array#includes - not
	    } else for (;length > index; index++) {
	      if ((IS_INCLUDES || index in O) && O[index] === el) return IS_INCLUDES || index || 0;
	    } return !IS_INCLUDES && -1;
	  };
	};

	var arrayIncludes = {
	  // `Array.prototype.includes` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.includes
	  includes: createMethod(true),
	  // `Array.prototype.indexOf` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.indexof
	  indexOf: createMethod(false)
	};

	var hiddenKeys = {};

	var indexOf = arrayIncludes.indexOf;


	var objectKeysInternal = function (object, names) {
	  var O = toIndexedObject(object);
	  var i = 0;
	  var result = [];
	  var key;
	  for (key in O) !has(hiddenKeys, key) && has(O, key) && result.push(key);
	  // Don't enum bug & hidden keys
	  while (names.length > i) if (has(O, key = names[i++])) {
	    ~indexOf(result, key) || result.push(key);
	  }
	  return result;
	};

	// IE8- don't enum bug keys
	var enumBugKeys = [
	  'constructor',
	  'hasOwnProperty',
	  'isPrototypeOf',
	  'propertyIsEnumerable',
	  'toLocaleString',
	  'toString',
	  'valueOf'
	];

	// `Object.keys` method
	// https://tc39.github.io/ecma262/#sec-object.keys
	var objectKeys = Object.keys || function keys(O) {
	  return objectKeysInternal(O, enumBugKeys);
	};

	// `Object.defineProperties` method
	// https://tc39.github.io/ecma262/#sec-object.defineproperties
	var objectDefineProperties = descriptors ? Object.defineProperties : function defineProperties(O, Properties) {
	  anObject(O);
	  var keys = objectKeys(Properties);
	  var length = keys.length;
	  var index = 0;
	  var key;
	  while (length > index) objectDefineProperty.f(O, key = keys[index++], Properties[key]);
	  return O;
	};

	// `Object.defineProperties` method
	// https://tc39.github.io/ecma262/#sec-object.defineproperties
	_export({ target: 'Object', stat: true, forced: !descriptors, sham: !descriptors }, {
	  defineProperties: objectDefineProperties
	});

	var defineProperties_1 = createCommonjsModule(function (module) {
	var Object = path.Object;

	var defineProperties = module.exports = function defineProperties(T, D) {
	  return Object.defineProperties(T, D);
	};

	if (Object.defineProperties.sham) defineProperties.sham = true;
	});

	var defineProperties = defineProperties_1;

	var defineProperties$1 = defineProperties;

	var aFunction$1 = function (variable) {
	  return typeof variable == 'function' ? variable : undefined;
	};

	var getBuiltIn = function (namespace, method) {
	  return arguments.length < 2 ? aFunction$1(path[namespace]) || aFunction$1(global_1[namespace])
	    : path[namespace] && path[namespace][method] || global_1[namespace] && global_1[namespace][method];
	};

	var hiddenKeys$1 = enumBugKeys.concat('length', 'prototype');

	// `Object.getOwnPropertyNames` method
	// https://tc39.github.io/ecma262/#sec-object.getownpropertynames
	var f$3 = Object.getOwnPropertyNames || function getOwnPropertyNames(O) {
	  return objectKeysInternal(O, hiddenKeys$1);
	};

	var objectGetOwnPropertyNames = {
		f: f$3
	};

	var f$4 = Object.getOwnPropertySymbols;

	var objectGetOwnPropertySymbols = {
		f: f$4
	};

	// all object keys, includes non-enumerable and symbols
	var ownKeys = getBuiltIn('Reflect', 'ownKeys') || function ownKeys(it) {
	  var keys = objectGetOwnPropertyNames.f(anObject(it));
	  var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;
	  return getOwnPropertySymbols ? keys.concat(getOwnPropertySymbols(it)) : keys;
	};

	var createProperty = function (object, key, value) {
	  var propertyKey = toPrimitive(key);
	  if (propertyKey in object) objectDefineProperty.f(object, propertyKey, createPropertyDescriptor(0, value));
	  else object[propertyKey] = value;
	};

	// `Object.getOwnPropertyDescriptors` method
	// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors
	_export({ target: 'Object', stat: true, sham: !descriptors }, {
	  getOwnPropertyDescriptors: function getOwnPropertyDescriptors(object) {
	    var O = toIndexedObject(object);
	    var getOwnPropertyDescriptor = objectGetOwnPropertyDescriptor.f;
	    var keys = ownKeys(O);
	    var result = {};
	    var index = 0;
	    var key, descriptor;
	    while (keys.length > index) {
	      descriptor = getOwnPropertyDescriptor(O, key = keys[index++]);
	      if (descriptor !== undefined) createProperty(result, key, descriptor);
	    }
	    return result;
	  }
	});

	var getOwnPropertyDescriptors = path.Object.getOwnPropertyDescriptors;

	var getOwnPropertyDescriptors$1 = getOwnPropertyDescriptors;

	var getOwnPropertyDescriptors$2 = getOwnPropertyDescriptors$1;

	var iterators = {};

	var setGlobal = function (key, value) {
	  try {
	    createNonEnumerableProperty(global_1, key, value);
	  } catch (error) {
	    global_1[key] = value;
	  } return value;
	};

	var SHARED = '__core-js_shared__';
	var store = global_1[SHARED] || setGlobal(SHARED, {});

	var sharedStore = store;

	var functionToString = Function.toString;

	// this helper broken in `3.4.1-3.4.4`, so we can't use `shared` helper
	if (typeof sharedStore.inspectSource != 'function') {
	  sharedStore.inspectSource = function (it) {
	    return functionToString.call(it);
	  };
	}

	var inspectSource = sharedStore.inspectSource;

	var WeakMap = global_1.WeakMap;

	var nativeWeakMap = typeof WeakMap === 'function' && /native code/.test(inspectSource(WeakMap));

	var isPure = true;

	var shared = createCommonjsModule(function (module) {
	(module.exports = function (key, value) {
	  return sharedStore[key] || (sharedStore[key] = value !== undefined ? value : {});
	})('versions', []).push({
	  version: '3.6.4',
	  mode:  'pure' ,
	  copyright: '© 2020 Denis Pushkarev (zloirock.ru)'
	});
	});

	var id = 0;
	var postfix = Math.random();

	var uid = function (key) {
	  return 'Symbol(' + String(key === undefined ? '' : key) + ')_' + (++id + postfix).toString(36);
	};

	var keys = shared('keys');

	var sharedKey = function (key) {
	  return keys[key] || (keys[key] = uid(key));
	};

	var WeakMap$1 = global_1.WeakMap;
	var set, get, has$1;

	var enforce = function (it) {
	  return has$1(it) ? get(it) : set(it, {});
	};

	var getterFor = function (TYPE) {
	  return function (it) {
	    var state;
	    if (!isObject(it) || (state = get(it)).type !== TYPE) {
	      throw TypeError('Incompatible receiver, ' + TYPE + ' required');
	    } return state;
	  };
	};

	if (nativeWeakMap) {
	  var store$1 = new WeakMap$1();
	  var wmget = store$1.get;
	  var wmhas = store$1.has;
	  var wmset = store$1.set;
	  set = function (it, metadata) {
	    wmset.call(store$1, it, metadata);
	    return metadata;
	  };
	  get = function (it) {
	    return wmget.call(store$1, it) || {};
	  };
	  has$1 = function (it) {
	    return wmhas.call(store$1, it);
	  };
	} else {
	  var STATE = sharedKey('state');
	  hiddenKeys[STATE] = true;
	  set = function (it, metadata) {
	    createNonEnumerableProperty(it, STATE, metadata);
	    return metadata;
	  };
	  get = function (it) {
	    return has(it, STATE) ? it[STATE] : {};
	  };
	  has$1 = function (it) {
	    return has(it, STATE);
	  };
	}

	var internalState = {
	  set: set,
	  get: get,
	  has: has$1,
	  enforce: enforce,
	  getterFor: getterFor
	};

	// `ToObject` abstract operation
	// https://tc39.github.io/ecma262/#sec-toobject
	var toObject = function (argument) {
	  return Object(requireObjectCoercible(argument));
	};

	var correctPrototypeGetter = !fails(function () {
	  function F() { /* empty */ }
	  F.prototype.constructor = null;
	  return Object.getPrototypeOf(new F()) !== F.prototype;
	});

	var IE_PROTO = sharedKey('IE_PROTO');
	var ObjectPrototype = Object.prototype;

	// `Object.getPrototypeOf` method
	// https://tc39.github.io/ecma262/#sec-object.getprototypeof
	var objectGetPrototypeOf = correctPrototypeGetter ? Object.getPrototypeOf : function (O) {
	  O = toObject(O);
	  if (has(O, IE_PROTO)) return O[IE_PROTO];
	  if (typeof O.constructor == 'function' && O instanceof O.constructor) {
	    return O.constructor.prototype;
	  } return O instanceof Object ? ObjectPrototype : null;
	};

	var nativeSymbol = !!Object.getOwnPropertySymbols && !fails(function () {
	  // Chrome 38 Symbol has incorrect toString conversion
	  // eslint-disable-next-line no-undef
	  return !String(Symbol());
	});

	var useSymbolAsUid = nativeSymbol
	  // eslint-disable-next-line no-undef
	  && !Symbol.sham
	  // eslint-disable-next-line no-undef
	  && typeof Symbol.iterator == 'symbol';

	var WellKnownSymbolsStore = shared('wks');
	var Symbol$1 = global_1.Symbol;
	var createWellKnownSymbol = useSymbolAsUid ? Symbol$1 : Symbol$1 && Symbol$1.withoutSetter || uid;

	var wellKnownSymbol = function (name) {
	  if (!has(WellKnownSymbolsStore, name)) {
	    if (nativeSymbol && has(Symbol$1, name)) WellKnownSymbolsStore[name] = Symbol$1[name];
	    else WellKnownSymbolsStore[name] = createWellKnownSymbol('Symbol.' + name);
	  } return WellKnownSymbolsStore[name];
	};

	var ITERATOR = wellKnownSymbol('iterator');
	var BUGGY_SAFARI_ITERATORS = false;

	// `%IteratorPrototype%` object
	// https://tc39.github.io/ecma262/#sec-%iteratorprototype%-object
	var IteratorPrototype, PrototypeOfArrayIteratorPrototype, arrayIterator;

	if ([].keys) {
	  arrayIterator = [].keys();
	  // Safari 8 has buggy iterators w/o `next`
	  if (!('next' in arrayIterator)) BUGGY_SAFARI_ITERATORS = true;
	  else {
	    PrototypeOfArrayIteratorPrototype = objectGetPrototypeOf(objectGetPrototypeOf(arrayIterator));
	    if (PrototypeOfArrayIteratorPrototype !== Object.prototype) IteratorPrototype = PrototypeOfArrayIteratorPrototype;
	  }
	}

	if (IteratorPrototype == undefined) IteratorPrototype = {};

	var iteratorsCore = {
	  IteratorPrototype: IteratorPrototype,
	  BUGGY_SAFARI_ITERATORS: BUGGY_SAFARI_ITERATORS
	};

	var html = getBuiltIn('document', 'documentElement');

	var GT = '>';
	var LT = '<';
	var PROTOTYPE = 'prototype';
	var SCRIPT = 'script';
	var IE_PROTO$1 = sharedKey('IE_PROTO');

	var EmptyConstructor = function () { /* empty */ };

	var scriptTag = function (content) {
	  return LT + SCRIPT + GT + content + LT + '/' + SCRIPT + GT;
	};

	// Create object with fake `null` prototype: use ActiveX Object with cleared prototype
	var NullProtoObjectViaActiveX = function (activeXDocument) {
	  activeXDocument.write(scriptTag(''));
	  activeXDocument.close();
	  var temp = activeXDocument.parentWindow.Object;
	  activeXDocument = null; // avoid memory leak
	  return temp;
	};

	// Create object with fake `null` prototype: use iframe Object with cleared prototype
	var NullProtoObjectViaIFrame = function () {
	  // Thrash, waste and sodomy: IE GC bug
	  var iframe = documentCreateElement('iframe');
	  var JS = 'java' + SCRIPT + ':';
	  var iframeDocument;
	  iframe.style.display = 'none';
	  html.appendChild(iframe);
	  // https://github.com/zloirock/core-js/issues/475
	  iframe.src = String(JS);
	  iframeDocument = iframe.contentWindow.document;
	  iframeDocument.open();
	  iframeDocument.write(scriptTag('document.F=Object'));
	  iframeDocument.close();
	  return iframeDocument.F;
	};

	// Check for document.domain and active x support
	// No need to use active x approach when document.domain is not set
	// see https://github.com/es-shims/es5-shim/issues/150
	// variation of https://github.com/kitcambridge/es5-shim/commit/4f738ac066346
	// avoid IE GC bug
	var activeXDocument;
	var NullProtoObject = function () {
	  try {
	    /* global ActiveXObject */
	    activeXDocument = document.domain && new ActiveXObject('htmlfile');
	  } catch (error) { /* ignore */ }
	  NullProtoObject = activeXDocument ? NullProtoObjectViaActiveX(activeXDocument) : NullProtoObjectViaIFrame();
	  var length = enumBugKeys.length;
	  while (length--) delete NullProtoObject[PROTOTYPE][enumBugKeys[length]];
	  return NullProtoObject();
	};

	hiddenKeys[IE_PROTO$1] = true;

	// `Object.create` method
	// https://tc39.github.io/ecma262/#sec-object.create
	var objectCreate = Object.create || function create(O, Properties) {
	  var result;
	  if (O !== null) {
	    EmptyConstructor[PROTOTYPE] = anObject(O);
	    result = new EmptyConstructor();
	    EmptyConstructor[PROTOTYPE] = null;
	    // add "__proto__" for Object.getPrototypeOf polyfill
	    result[IE_PROTO$1] = O;
	  } else result = NullProtoObject();
	  return Properties === undefined ? result : objectDefineProperties(result, Properties);
	};

	var TO_STRING_TAG = wellKnownSymbol('toStringTag');
	var test = {};

	test[TO_STRING_TAG] = 'z';

	var toStringTagSupport = String(test) === '[object z]';

	var TO_STRING_TAG$1 = wellKnownSymbol('toStringTag');
	// ES3 wrong here
	var CORRECT_ARGUMENTS = classofRaw(function () { return arguments; }()) == 'Arguments';

	// fallback for IE11 Script Access Denied error
	var tryGet = function (it, key) {
	  try {
	    return it[key];
	  } catch (error) { /* empty */ }
	};

	// getting tag from ES6+ `Object.prototype.toString`
	var classof = toStringTagSupport ? classofRaw : function (it) {
	  var O, tag, result;
	  return it === undefined ? 'Undefined' : it === null ? 'Null'
	    // @@toStringTag case
	    : typeof (tag = tryGet(O = Object(it), TO_STRING_TAG$1)) == 'string' ? tag
	    // builtinTag case
	    : CORRECT_ARGUMENTS ? classofRaw(O)
	    // ES3 arguments fallback
	    : (result = classofRaw(O)) == 'Object' && typeof O.callee == 'function' ? 'Arguments' : result;
	};

	// `Object.prototype.toString` method implementation
	// https://tc39.github.io/ecma262/#sec-object.prototype.tostring
	var objectToString = toStringTagSupport ? {}.toString : function toString() {
	  return '[object ' + classof(this) + ']';
	};

	var defineProperty = objectDefineProperty.f;





	var TO_STRING_TAG$2 = wellKnownSymbol('toStringTag');

	var setToStringTag = function (it, TAG, STATIC, SET_METHOD) {
	  if (it) {
	    var target = STATIC ? it : it.prototype;
	    if (!has(target, TO_STRING_TAG$2)) {
	      defineProperty(target, TO_STRING_TAG$2, { configurable: true, value: TAG });
	    }
	    if (SET_METHOD && !toStringTagSupport) {
	      createNonEnumerableProperty(target, 'toString', objectToString);
	    }
	  }
	};

	var IteratorPrototype$1 = iteratorsCore.IteratorPrototype;





	var returnThis = function () { return this; };

	var createIteratorConstructor = function (IteratorConstructor, NAME, next) {
	  var TO_STRING_TAG = NAME + ' Iterator';
	  IteratorConstructor.prototype = objectCreate(IteratorPrototype$1, { next: createPropertyDescriptor(1, next) });
	  setToStringTag(IteratorConstructor, TO_STRING_TAG, false, true);
	  iterators[TO_STRING_TAG] = returnThis;
	  return IteratorConstructor;
	};

	var aPossiblePrototype = function (it) {
	  if (!isObject(it) && it !== null) {
	    throw TypeError("Can't set " + String(it) + ' as a prototype');
	  } return it;
	};

	// `Object.setPrototypeOf` method
	// https://tc39.github.io/ecma262/#sec-object.setprototypeof
	// Works with __proto__ only. Old v8 can't work with null proto objects.
	/* eslint-disable no-proto */
	var objectSetPrototypeOf = Object.setPrototypeOf || ('__proto__' in {} ? function () {
	  var CORRECT_SETTER = false;
	  var test = {};
	  var setter;
	  try {
	    setter = Object.getOwnPropertyDescriptor(Object.prototype, '__proto__').set;
	    setter.call(test, []);
	    CORRECT_SETTER = test instanceof Array;
	  } catch (error) { /* empty */ }
	  return function setPrototypeOf(O, proto) {
	    anObject(O);
	    aPossiblePrototype(proto);
	    if (CORRECT_SETTER) setter.call(O, proto);
	    else O.__proto__ = proto;
	    return O;
	  };
	}() : undefined);

	var redefine = function (target, key, value, options) {
	  if (options && options.enumerable) target[key] = value;
	  else createNonEnumerableProperty(target, key, value);
	};

	var IteratorPrototype$2 = iteratorsCore.IteratorPrototype;
	var BUGGY_SAFARI_ITERATORS$1 = iteratorsCore.BUGGY_SAFARI_ITERATORS;
	var ITERATOR$1 = wellKnownSymbol('iterator');
	var KEYS = 'keys';
	var VALUES = 'values';
	var ENTRIES = 'entries';

	var returnThis$1 = function () { return this; };

	var defineIterator = function (Iterable, NAME, IteratorConstructor, next, DEFAULT, IS_SET, FORCED) {
	  createIteratorConstructor(IteratorConstructor, NAME, next);

	  var getIterationMethod = function (KIND) {
	    if (KIND === DEFAULT && defaultIterator) return defaultIterator;
	    if (!BUGGY_SAFARI_ITERATORS$1 && KIND in IterablePrototype) return IterablePrototype[KIND];
	    switch (KIND) {
	      case KEYS: return function keys() { return new IteratorConstructor(this, KIND); };
	      case VALUES: return function values() { return new IteratorConstructor(this, KIND); };
	      case ENTRIES: return function entries() { return new IteratorConstructor(this, KIND); };
	    } return function () { return new IteratorConstructor(this); };
	  };

	  var TO_STRING_TAG = NAME + ' Iterator';
	  var INCORRECT_VALUES_NAME = false;
	  var IterablePrototype = Iterable.prototype;
	  var nativeIterator = IterablePrototype[ITERATOR$1]
	    || IterablePrototype['@@iterator']
	    || DEFAULT && IterablePrototype[DEFAULT];
	  var defaultIterator = !BUGGY_SAFARI_ITERATORS$1 && nativeIterator || getIterationMethod(DEFAULT);
	  var anyNativeIterator = NAME == 'Array' ? IterablePrototype.entries || nativeIterator : nativeIterator;
	  var CurrentIteratorPrototype, methods, KEY;

	  // fix native
	  if (anyNativeIterator) {
	    CurrentIteratorPrototype = objectGetPrototypeOf(anyNativeIterator.call(new Iterable()));
	    if (IteratorPrototype$2 !== Object.prototype && CurrentIteratorPrototype.next) {
	      // Set @@toStringTag to native iterators
	      setToStringTag(CurrentIteratorPrototype, TO_STRING_TAG, true, true);
	      iterators[TO_STRING_TAG] = returnThis$1;
	    }
	  }

	  // fix Array#{values, @@iterator}.name in V8 / FF
	  if (DEFAULT == VALUES && nativeIterator && nativeIterator.name !== VALUES) {
	    INCORRECT_VALUES_NAME = true;
	    defaultIterator = function values() { return nativeIterator.call(this); };
	  }

	  // define iterator
	  if (( FORCED) && IterablePrototype[ITERATOR$1] !== defaultIterator) {
	    createNonEnumerableProperty(IterablePrototype, ITERATOR$1, defaultIterator);
	  }
	  iterators[NAME] = defaultIterator;

	  // export additional methods
	  if (DEFAULT) {
	    methods = {
	      values: getIterationMethod(VALUES),
	      keys: IS_SET ? defaultIterator : getIterationMethod(KEYS),
	      entries: getIterationMethod(ENTRIES)
	    };
	    if (FORCED) for (KEY in methods) {
	      if (BUGGY_SAFARI_ITERATORS$1 || INCORRECT_VALUES_NAME || !(KEY in IterablePrototype)) {
	        redefine(IterablePrototype, KEY, methods[KEY]);
	      }
	    } else _export({ target: NAME, proto: true, forced: BUGGY_SAFARI_ITERATORS$1 || INCORRECT_VALUES_NAME }, methods);
	  }

	  return methods;
	};

	var ARRAY_ITERATOR = 'Array Iterator';
	var setInternalState = internalState.set;
	var getInternalState = internalState.getterFor(ARRAY_ITERATOR);

	// `Array.prototype.entries` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.entries
	// `Array.prototype.keys` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.keys
	// `Array.prototype.values` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.values
	// `Array.prototype[@@iterator]` method
	// https://tc39.github.io/ecma262/#sec-array.prototype-@@iterator
	// `CreateArrayIterator` internal method
	// https://tc39.github.io/ecma262/#sec-createarrayiterator
	var es_array_iterator = defineIterator(Array, 'Array', function (iterated, kind) {
	  setInternalState(this, {
	    type: ARRAY_ITERATOR,
	    target: toIndexedObject(iterated), // target
	    index: 0,                          // next index
	    kind: kind                         // kind
	  });
	// `%ArrayIteratorPrototype%.next` method
	// https://tc39.github.io/ecma262/#sec-%arrayiteratorprototype%.next
	}, function () {
	  var state = getInternalState(this);
	  var target = state.target;
	  var kind = state.kind;
	  var index = state.index++;
	  if (!target || index >= target.length) {
	    state.target = undefined;
	    return { value: undefined, done: true };
	  }
	  if (kind == 'keys') return { value: index, done: false };
	  if (kind == 'values') return { value: target[index], done: false };
	  return { value: [index, target[index]], done: false };
	}, 'values');

	// argumentsList[@@iterator] is %ArrayProto_values%
	// https://tc39.github.io/ecma262/#sec-createunmappedargumentsobject
	// https://tc39.github.io/ecma262/#sec-createmappedargumentsobject
	iterators.Arguments = iterators.Array;

	// iterable DOM collections
	// flag - `iterable` interface - 'entries', 'keys', 'values', 'forEach' methods
	var domIterables = {
	  CSSRuleList: 0,
	  CSSStyleDeclaration: 0,
	  CSSValueList: 0,
	  ClientRectList: 0,
	  DOMRectList: 0,
	  DOMStringList: 0,
	  DOMTokenList: 1,
	  DataTransferItemList: 0,
	  FileList: 0,
	  HTMLAllCollection: 0,
	  HTMLCollection: 0,
	  HTMLFormElement: 0,
	  HTMLSelectElement: 0,
	  MediaList: 0,
	  MimeTypeArray: 0,
	  NamedNodeMap: 0,
	  NodeList: 1,
	  PaintRequestList: 0,
	  Plugin: 0,
	  PluginArray: 0,
	  SVGLengthList: 0,
	  SVGNumberList: 0,
	  SVGPathSegList: 0,
	  SVGPointList: 0,
	  SVGStringList: 0,
	  SVGTransformList: 0,
	  SourceBufferList: 0,
	  StyleSheetList: 0,
	  TextTrackCueList: 0,
	  TextTrackList: 0,
	  TouchList: 0
	};

	var TO_STRING_TAG$3 = wellKnownSymbol('toStringTag');

	for (var COLLECTION_NAME in domIterables) {
	  var Collection = global_1[COLLECTION_NAME];
	  var CollectionPrototype = Collection && Collection.prototype;
	  if (CollectionPrototype && classof(CollectionPrototype) !== TO_STRING_TAG$3) {
	    createNonEnumerableProperty(CollectionPrototype, TO_STRING_TAG$3, COLLECTION_NAME);
	  }
	  iterators[COLLECTION_NAME] = iterators.Array;
	}

	// `IsArray` abstract operation
	// https://tc39.github.io/ecma262/#sec-isarray
	var isArray = Array.isArray || function isArray(arg) {
	  return classofRaw(arg) == 'Array';
	};

	var SPECIES = wellKnownSymbol('species');

	// `ArraySpeciesCreate` abstract operation
	// https://tc39.github.io/ecma262/#sec-arrayspeciescreate
	var arraySpeciesCreate = function (originalArray, length) {
	  var C;
	  if (isArray(originalArray)) {
	    C = originalArray.constructor;
	    // cross-realm fallback
	    if (typeof C == 'function' && (C === Array || isArray(C.prototype))) C = undefined;
	    else if (isObject(C)) {
	      C = C[SPECIES];
	      if (C === null) C = undefined;
	    }
	  } return new (C === undefined ? Array : C)(length === 0 ? 0 : length);
	};

	var push = [].push;

	// `Array.prototype.{ forEach, map, filter, some, every, find, findIndex }` methods implementation
	var createMethod$1 = function (TYPE) {
	  var IS_MAP = TYPE == 1;
	  var IS_FILTER = TYPE == 2;
	  var IS_SOME = TYPE == 3;
	  var IS_EVERY = TYPE == 4;
	  var IS_FIND_INDEX = TYPE == 6;
	  var NO_HOLES = TYPE == 5 || IS_FIND_INDEX;
	  return function ($this, callbackfn, that, specificCreate) {
	    var O = toObject($this);
	    var self = indexedObject(O);
	    var boundFunction = functionBindContext(callbackfn, that, 3);
	    var length = toLength(self.length);
	    var index = 0;
	    var create = specificCreate || arraySpeciesCreate;
	    var target = IS_MAP ? create($this, length) : IS_FILTER ? create($this, 0) : undefined;
	    var value, result;
	    for (;length > index; index++) if (NO_HOLES || index in self) {
	      value = self[index];
	      result = boundFunction(value, index, O);
	      if (TYPE) {
	        if (IS_MAP) target[index] = result; // map
	        else if (result) switch (TYPE) {
	          case 3: return true;              // some
	          case 5: return value;             // find
	          case 6: return index;             // findIndex
	          case 2: push.call(target, value); // filter
	        } else if (IS_EVERY) return false;  // every
	      }
	    }
	    return IS_FIND_INDEX ? -1 : IS_SOME || IS_EVERY ? IS_EVERY : target;
	  };
	};

	var arrayIteration = {
	  // `Array.prototype.forEach` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.foreach
	  forEach: createMethod$1(0),
	  // `Array.prototype.map` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.map
	  map: createMethod$1(1),
	  // `Array.prototype.filter` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.filter
	  filter: createMethod$1(2),
	  // `Array.prototype.some` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.some
	  some: createMethod$1(3),
	  // `Array.prototype.every` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.every
	  every: createMethod$1(4),
	  // `Array.prototype.find` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.find
	  find: createMethod$1(5),
	  // `Array.prototype.findIndex` method
	  // https://tc39.github.io/ecma262/#sec-array.prototype.findIndex
	  findIndex: createMethod$1(6)
	};

	var arrayMethodIsStrict = function (METHOD_NAME, argument) {
	  var method = [][METHOD_NAME];
	  return !!method && fails(function () {
	    // eslint-disable-next-line no-useless-call,no-throw-literal
	    method.call(null, argument || function () { throw 1; }, 1);
	  });
	};

	var defineProperty$1 = Object.defineProperty;
	var cache = {};

	var thrower = function (it) { throw it; };

	var arrayMethodUsesToLength = function (METHOD_NAME, options) {
	  if (has(cache, METHOD_NAME)) return cache[METHOD_NAME];
	  if (!options) options = {};
	  var method = [][METHOD_NAME];
	  var ACCESSORS = has(options, 'ACCESSORS') ? options.ACCESSORS : false;
	  var argument0 = has(options, 0) ? options[0] : thrower;
	  var argument1 = has(options, 1) ? options[1] : undefined;

	  return cache[METHOD_NAME] = !!method && !fails(function () {
	    if (ACCESSORS && !descriptors) return true;
	    var O = { length: -1 };

	    if (ACCESSORS) defineProperty$1(O, 1, { enumerable: true, get: thrower });
	    else O[1] = 1;

	    method.call(O, argument0, argument1);
	  });
	};

	var $forEach = arrayIteration.forEach;



	var STRICT_METHOD = arrayMethodIsStrict('forEach');
	var USES_TO_LENGTH = arrayMethodUsesToLength('forEach');

	// `Array.prototype.forEach` method implementation
	// https://tc39.github.io/ecma262/#sec-array.prototype.foreach
	var arrayForEach = (!STRICT_METHOD || !USES_TO_LENGTH) ? function forEach(callbackfn /* , thisArg */) {
	  return $forEach(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	} : [].forEach;

	// `Array.prototype.forEach` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.foreach
	_export({ target: 'Array', proto: true, forced: [].forEach != arrayForEach }, {
	  forEach: arrayForEach
	});

	var entryVirtual = function (CONSTRUCTOR) {
	  return path[CONSTRUCTOR + 'Prototype'];
	};

	var forEach = entryVirtual('Array').forEach;

	var forEach$1 = forEach;

	var ArrayPrototype = Array.prototype;

	var DOMIterables = {
	  DOMTokenList: true,
	  NodeList: true
	};

	var forEach_1 = function (it) {
	  var own = it.forEach;
	  return it === ArrayPrototype || (it instanceof Array && own === ArrayPrototype.forEach)
	    // eslint-disable-next-line no-prototype-builtins
	    || DOMIterables.hasOwnProperty(classof(it)) ? forEach$1 : own;
	};

	var forEach$2 = forEach_1;

	var nativeGetOwnPropertyDescriptor$1 = objectGetOwnPropertyDescriptor.f;


	var FAILS_ON_PRIMITIVES = fails(function () { nativeGetOwnPropertyDescriptor$1(1); });
	var FORCED = !descriptors || FAILS_ON_PRIMITIVES;

	// `Object.getOwnPropertyDescriptor` method
	// https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptor
	_export({ target: 'Object', stat: true, forced: FORCED, sham: !descriptors }, {
	  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(it, key) {
	    return nativeGetOwnPropertyDescriptor$1(toIndexedObject(it), key);
	  }
	});

	var getOwnPropertyDescriptor_1 = createCommonjsModule(function (module) {
	var Object = path.Object;

	var getOwnPropertyDescriptor = module.exports = function getOwnPropertyDescriptor(it, key) {
	  return Object.getOwnPropertyDescriptor(it, key);
	};

	if (Object.getOwnPropertyDescriptor.sham) getOwnPropertyDescriptor.sham = true;
	});

	var getOwnPropertyDescriptor$2 = getOwnPropertyDescriptor_1;

	var getOwnPropertyDescriptor$3 = getOwnPropertyDescriptor$2;

	var engineUserAgent = getBuiltIn('navigator', 'userAgent') || '';

	var process = global_1.process;
	var versions = process && process.versions;
	var v8 = versions && versions.v8;
	var match, version;

	if (v8) {
	  match = v8.split('.');
	  version = match[0] + match[1];
	} else if (engineUserAgent) {
	  match = engineUserAgent.match(/Edge\/(\d+)/);
	  if (!match || match[1] >= 74) {
	    match = engineUserAgent.match(/Chrome\/(\d+)/);
	    if (match) version = match[1];
	  }
	}

	var engineV8Version = version && +version;

	var SPECIES$1 = wellKnownSymbol('species');

	var arrayMethodHasSpeciesSupport = function (METHOD_NAME) {
	  // We can't use this feature detection in V8 since it causes
	  // deoptimization and serious performance degradation
	  // https://github.com/zloirock/core-js/issues/677
	  return engineV8Version >= 51 || !fails(function () {
	    var array = [];
	    var constructor = array.constructor = {};
	    constructor[SPECIES$1] = function () {
	      return { foo: 1 };
	    };
	    return array[METHOD_NAME](Boolean).foo !== 1;
	  });
	};

	var $filter = arrayIteration.filter;



	var HAS_SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('filter');
	// Edge 14- issue
	var USES_TO_LENGTH$1 = arrayMethodUsesToLength('filter');

	// `Array.prototype.filter` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.filter
	// with adding support of @@species
	_export({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT || !USES_TO_LENGTH$1 }, {
	  filter: function filter(callbackfn /* , thisArg */) {
	    return $filter(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var filter = entryVirtual('Array').filter;

	var ArrayPrototype$1 = Array.prototype;

	var filter_1 = function (it) {
	  var own = it.filter;
	  return it === ArrayPrototype$1 || (it instanceof Array && own === ArrayPrototype$1.filter) ? filter : own;
	};

	var filter$1 = filter_1;

	var filter$2 = filter$1;

	var nativeGetOwnPropertyNames = objectGetOwnPropertyNames.f;

	var toString$1 = {}.toString;

	var windowNames = typeof window == 'object' && window && Object.getOwnPropertyNames
	  ? Object.getOwnPropertyNames(window) : [];

	var getWindowNames = function (it) {
	  try {
	    return nativeGetOwnPropertyNames(it);
	  } catch (error) {
	    return windowNames.slice();
	  }
	};

	// fallback for IE11 buggy Object.getOwnPropertyNames with iframe and window
	var f$5 = function getOwnPropertyNames(it) {
	  return windowNames && toString$1.call(it) == '[object Window]'
	    ? getWindowNames(it)
	    : nativeGetOwnPropertyNames(toIndexedObject(it));
	};

	var objectGetOwnPropertyNamesExternal = {
		f: f$5
	};

	var f$6 = wellKnownSymbol;

	var wellKnownSymbolWrapped = {
		f: f$6
	};

	var defineProperty$2 = objectDefineProperty.f;

	var defineWellKnownSymbol = function (NAME) {
	  var Symbol = path.Symbol || (path.Symbol = {});
	  if (!has(Symbol, NAME)) defineProperty$2(Symbol, NAME, {
	    value: wellKnownSymbolWrapped.f(NAME)
	  });
	};

	var $forEach$1 = arrayIteration.forEach;

	var HIDDEN = sharedKey('hidden');
	var SYMBOL = 'Symbol';
	var PROTOTYPE$1 = 'prototype';
	var TO_PRIMITIVE = wellKnownSymbol('toPrimitive');
	var setInternalState$1 = internalState.set;
	var getInternalState$1 = internalState.getterFor(SYMBOL);
	var ObjectPrototype$1 = Object[PROTOTYPE$1];
	var $Symbol = global_1.Symbol;
	var $stringify = getBuiltIn('JSON', 'stringify');
	var nativeGetOwnPropertyDescriptor$2 = objectGetOwnPropertyDescriptor.f;
	var nativeDefineProperty$1 = objectDefineProperty.f;
	var nativeGetOwnPropertyNames$1 = objectGetOwnPropertyNamesExternal.f;
	var nativePropertyIsEnumerable$1 = objectPropertyIsEnumerable.f;
	var AllSymbols = shared('symbols');
	var ObjectPrototypeSymbols = shared('op-symbols');
	var StringToSymbolRegistry = shared('string-to-symbol-registry');
	var SymbolToStringRegistry = shared('symbol-to-string-registry');
	var WellKnownSymbolsStore$1 = shared('wks');
	var QObject = global_1.QObject;
	// Don't use setters in Qt Script, https://github.com/zloirock/core-js/issues/173
	var USE_SETTER = !QObject || !QObject[PROTOTYPE$1] || !QObject[PROTOTYPE$1].findChild;

	// fallback for old Android, https://code.google.com/p/v8/issues/detail?id=687
	var setSymbolDescriptor = descriptors && fails(function () {
	  return objectCreate(nativeDefineProperty$1({}, 'a', {
	    get: function () { return nativeDefineProperty$1(this, 'a', { value: 7 }).a; }
	  })).a != 7;
	}) ? function (O, P, Attributes) {
	  var ObjectPrototypeDescriptor = nativeGetOwnPropertyDescriptor$2(ObjectPrototype$1, P);
	  if (ObjectPrototypeDescriptor) delete ObjectPrototype$1[P];
	  nativeDefineProperty$1(O, P, Attributes);
	  if (ObjectPrototypeDescriptor && O !== ObjectPrototype$1) {
	    nativeDefineProperty$1(ObjectPrototype$1, P, ObjectPrototypeDescriptor);
	  }
	} : nativeDefineProperty$1;

	var wrap = function (tag, description) {
	  var symbol = AllSymbols[tag] = objectCreate($Symbol[PROTOTYPE$1]);
	  setInternalState$1(symbol, {
	    type: SYMBOL,
	    tag: tag,
	    description: description
	  });
	  if (!descriptors) symbol.description = description;
	  return symbol;
	};

	var isSymbol = useSymbolAsUid ? function (it) {
	  return typeof it == 'symbol';
	} : function (it) {
	  return Object(it) instanceof $Symbol;
	};

	var $defineProperty = function defineProperty(O, P, Attributes) {
	  if (O === ObjectPrototype$1) $defineProperty(ObjectPrototypeSymbols, P, Attributes);
	  anObject(O);
	  var key = toPrimitive(P, true);
	  anObject(Attributes);
	  if (has(AllSymbols, key)) {
	    if (!Attributes.enumerable) {
	      if (!has(O, HIDDEN)) nativeDefineProperty$1(O, HIDDEN, createPropertyDescriptor(1, {}));
	      O[HIDDEN][key] = true;
	    } else {
	      if (has(O, HIDDEN) && O[HIDDEN][key]) O[HIDDEN][key] = false;
	      Attributes = objectCreate(Attributes, { enumerable: createPropertyDescriptor(0, false) });
	    } return setSymbolDescriptor(O, key, Attributes);
	  } return nativeDefineProperty$1(O, key, Attributes);
	};

	var $defineProperties = function defineProperties(O, Properties) {
	  anObject(O);
	  var properties = toIndexedObject(Properties);
	  var keys = objectKeys(properties).concat($getOwnPropertySymbols(properties));
	  $forEach$1(keys, function (key) {
	    if (!descriptors || $propertyIsEnumerable.call(properties, key)) $defineProperty(O, key, properties[key]);
	  });
	  return O;
	};

	var $create = function create(O, Properties) {
	  return Properties === undefined ? objectCreate(O) : $defineProperties(objectCreate(O), Properties);
	};

	var $propertyIsEnumerable = function propertyIsEnumerable(V) {
	  var P = toPrimitive(V, true);
	  var enumerable = nativePropertyIsEnumerable$1.call(this, P);
	  if (this === ObjectPrototype$1 && has(AllSymbols, P) && !has(ObjectPrototypeSymbols, P)) return false;
	  return enumerable || !has(this, P) || !has(AllSymbols, P) || has(this, HIDDEN) && this[HIDDEN][P] ? enumerable : true;
	};

	var $getOwnPropertyDescriptor = function getOwnPropertyDescriptor(O, P) {
	  var it = toIndexedObject(O);
	  var key = toPrimitive(P, true);
	  if (it === ObjectPrototype$1 && has(AllSymbols, key) && !has(ObjectPrototypeSymbols, key)) return;
	  var descriptor = nativeGetOwnPropertyDescriptor$2(it, key);
	  if (descriptor && has(AllSymbols, key) && !(has(it, HIDDEN) && it[HIDDEN][key])) {
	    descriptor.enumerable = true;
	  }
	  return descriptor;
	};

	var $getOwnPropertyNames = function getOwnPropertyNames(O) {
	  var names = nativeGetOwnPropertyNames$1(toIndexedObject(O));
	  var result = [];
	  $forEach$1(names, function (key) {
	    if (!has(AllSymbols, key) && !has(hiddenKeys, key)) result.push(key);
	  });
	  return result;
	};

	var $getOwnPropertySymbols = function getOwnPropertySymbols(O) {
	  var IS_OBJECT_PROTOTYPE = O === ObjectPrototype$1;
	  var names = nativeGetOwnPropertyNames$1(IS_OBJECT_PROTOTYPE ? ObjectPrototypeSymbols : toIndexedObject(O));
	  var result = [];
	  $forEach$1(names, function (key) {
	    if (has(AllSymbols, key) && (!IS_OBJECT_PROTOTYPE || has(ObjectPrototype$1, key))) {
	      result.push(AllSymbols[key]);
	    }
	  });
	  return result;
	};

	// `Symbol` constructor
	// https://tc39.github.io/ecma262/#sec-symbol-constructor
	if (!nativeSymbol) {
	  $Symbol = function Symbol() {
	    if (this instanceof $Symbol) throw TypeError('Symbol is not a constructor');
	    var description = !arguments.length || arguments[0] === undefined ? undefined : String(arguments[0]);
	    var tag = uid(description);
	    var setter = function (value) {
	      if (this === ObjectPrototype$1) setter.call(ObjectPrototypeSymbols, value);
	      if (has(this, HIDDEN) && has(this[HIDDEN], tag)) this[HIDDEN][tag] = false;
	      setSymbolDescriptor(this, tag, createPropertyDescriptor(1, value));
	    };
	    if (descriptors && USE_SETTER) setSymbolDescriptor(ObjectPrototype$1, tag, { configurable: true, set: setter });
	    return wrap(tag, description);
	  };

	  redefine($Symbol[PROTOTYPE$1], 'toString', function toString() {
	    return getInternalState$1(this).tag;
	  });

	  redefine($Symbol, 'withoutSetter', function (description) {
	    return wrap(uid(description), description);
	  });

	  objectPropertyIsEnumerable.f = $propertyIsEnumerable;
	  objectDefineProperty.f = $defineProperty;
	  objectGetOwnPropertyDescriptor.f = $getOwnPropertyDescriptor;
	  objectGetOwnPropertyNames.f = objectGetOwnPropertyNamesExternal.f = $getOwnPropertyNames;
	  objectGetOwnPropertySymbols.f = $getOwnPropertySymbols;

	  wellKnownSymbolWrapped.f = function (name) {
	    return wrap(wellKnownSymbol(name), name);
	  };

	  if (descriptors) {
	    // https://github.com/tc39/proposal-Symbol-description
	    nativeDefineProperty$1($Symbol[PROTOTYPE$1], 'description', {
	      configurable: true,
	      get: function description() {
	        return getInternalState$1(this).description;
	      }
	    });
	  }
	}

	_export({ global: true, wrap: true, forced: !nativeSymbol, sham: !nativeSymbol }, {
	  Symbol: $Symbol
	});

	$forEach$1(objectKeys(WellKnownSymbolsStore$1), function (name) {
	  defineWellKnownSymbol(name);
	});

	_export({ target: SYMBOL, stat: true, forced: !nativeSymbol }, {
	  // `Symbol.for` method
	  // https://tc39.github.io/ecma262/#sec-symbol.for
	  'for': function (key) {
	    var string = String(key);
	    if (has(StringToSymbolRegistry, string)) return StringToSymbolRegistry[string];
	    var symbol = $Symbol(string);
	    StringToSymbolRegistry[string] = symbol;
	    SymbolToStringRegistry[symbol] = string;
	    return symbol;
	  },
	  // `Symbol.keyFor` method
	  // https://tc39.github.io/ecma262/#sec-symbol.keyfor
	  keyFor: function keyFor(sym) {
	    if (!isSymbol(sym)) throw TypeError(sym + ' is not a symbol');
	    if (has(SymbolToStringRegistry, sym)) return SymbolToStringRegistry[sym];
	  },
	  useSetter: function () { USE_SETTER = true; },
	  useSimple: function () { USE_SETTER = false; }
	});

	_export({ target: 'Object', stat: true, forced: !nativeSymbol, sham: !descriptors }, {
	  // `Object.create` method
	  // https://tc39.github.io/ecma262/#sec-object.create
	  create: $create,
	  // `Object.defineProperty` method
	  // https://tc39.github.io/ecma262/#sec-object.defineproperty
	  defineProperty: $defineProperty,
	  // `Object.defineProperties` method
	  // https://tc39.github.io/ecma262/#sec-object.defineproperties
	  defineProperties: $defineProperties,
	  // `Object.getOwnPropertyDescriptor` method
	  // https://tc39.github.io/ecma262/#sec-object.getownpropertydescriptors
	  getOwnPropertyDescriptor: $getOwnPropertyDescriptor
	});

	_export({ target: 'Object', stat: true, forced: !nativeSymbol }, {
	  // `Object.getOwnPropertyNames` method
	  // https://tc39.github.io/ecma262/#sec-object.getownpropertynames
	  getOwnPropertyNames: $getOwnPropertyNames,
	  // `Object.getOwnPropertySymbols` method
	  // https://tc39.github.io/ecma262/#sec-object.getownpropertysymbols
	  getOwnPropertySymbols: $getOwnPropertySymbols
	});

	// Chrome 38 and 39 `Object.getOwnPropertySymbols` fails on primitives
	// https://bugs.chromium.org/p/v8/issues/detail?id=3443
	_export({ target: 'Object', stat: true, forced: fails(function () { objectGetOwnPropertySymbols.f(1); }) }, {
	  getOwnPropertySymbols: function getOwnPropertySymbols(it) {
	    return objectGetOwnPropertySymbols.f(toObject(it));
	  }
	});

	// `JSON.stringify` method behavior with symbols
	// https://tc39.github.io/ecma262/#sec-json.stringify
	if ($stringify) {
	  var FORCED_JSON_STRINGIFY = !nativeSymbol || fails(function () {
	    var symbol = $Symbol();
	    // MS Edge converts symbol values to JSON as {}
	    return $stringify([symbol]) != '[null]'
	      // WebKit converts symbol values to JSON as null
	      || $stringify({ a: symbol }) != '{}'
	      // V8 throws on boxed symbols
	      || $stringify(Object(symbol)) != '{}';
	  });

	  _export({ target: 'JSON', stat: true, forced: FORCED_JSON_STRINGIFY }, {
	    // eslint-disable-next-line no-unused-vars
	    stringify: function stringify(it, replacer, space) {
	      var args = [it];
	      var index = 1;
	      var $replacer;
	      while (arguments.length > index) args.push(arguments[index++]);
	      $replacer = replacer;
	      if (!isObject(replacer) && it === undefined || isSymbol(it)) return; // IE8 returns string on undefined
	      if (!isArray(replacer)) replacer = function (key, value) {
	        if (typeof $replacer == 'function') value = $replacer.call(this, key, value);
	        if (!isSymbol(value)) return value;
	      };
	      args[1] = replacer;
	      return $stringify.apply(null, args);
	    }
	  });
	}

	// `Symbol.prototype[@@toPrimitive]` method
	// https://tc39.github.io/ecma262/#sec-symbol.prototype-@@toprimitive
	if (!$Symbol[PROTOTYPE$1][TO_PRIMITIVE]) {
	  createNonEnumerableProperty($Symbol[PROTOTYPE$1], TO_PRIMITIVE, $Symbol[PROTOTYPE$1].valueOf);
	}
	// `Symbol.prototype[@@toStringTag]` property
	// https://tc39.github.io/ecma262/#sec-symbol.prototype-@@tostringtag
	setToStringTag($Symbol, SYMBOL);

	hiddenKeys[HIDDEN] = true;

	var getOwnPropertySymbols = path.Object.getOwnPropertySymbols;

	var getOwnPropertySymbols$1 = getOwnPropertySymbols;

	var getOwnPropertySymbols$2 = getOwnPropertySymbols$1;

	var FAILS_ON_PRIMITIVES$1 = fails(function () { objectKeys(1); });

	// `Object.keys` method
	// https://tc39.github.io/ecma262/#sec-object.keys
	_export({ target: 'Object', stat: true, forced: FAILS_ON_PRIMITIVES$1 }, {
	  keys: function keys(it) {
	    return objectKeys(toObject(it));
	  }
	});

	var keys$1 = path.Object.keys;

	var keys$2 = keys$1;

	var keys$3 = keys$2;

	var runtime_1 = createCommonjsModule(function (module) {
	/**
	 * Copyright (c) 2014-present, Facebook, Inc.
	 *
	 * This source code is licensed under the MIT license found in the
	 * LICENSE file in the root directory of this source tree.
	 */

	var runtime = (function (exports) {

	  var Op = Object.prototype;
	  var hasOwn = Op.hasOwnProperty;
	  var undefined$1; // More compressible than void 0.
	  var $Symbol = typeof Symbol === "function" ? Symbol : {};
	  var iteratorSymbol = $Symbol.iterator || "@@iterator";
	  var asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator";
	  var toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";

	  function define(obj, key, value) {
	    Object.defineProperty(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	    return obj[key];
	  }
	  try {
	    // IE 8 has a broken Object.defineProperty that only works on DOM objects.
	    define({}, "");
	  } catch (err) {
	    define = function(obj, key, value) {
	      return obj[key] = value;
	    };
	  }

	  function wrap(innerFn, outerFn, self, tryLocsList) {
	    // If outerFn provided and outerFn.prototype is a Generator, then outerFn.prototype instanceof Generator.
	    var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator;
	    var generator = Object.create(protoGenerator.prototype);
	    var context = new Context(tryLocsList || []);

	    // The ._invoke method unifies the implementations of the .next,
	    // .throw, and .return methods.
	    generator._invoke = makeInvokeMethod(innerFn, self, context);

	    return generator;
	  }
	  exports.wrap = wrap;

	  // Try/catch helper to minimize deoptimizations. Returns a completion
	  // record like context.tryEntries[i].completion. This interface could
	  // have been (and was previously) designed to take a closure to be
	  // invoked without arguments, but in all the cases we care about we
	  // already have an existing method we want to call, so there's no need
	  // to create a new function object. We can even get away with assuming
	  // the method takes exactly one argument, since that happens to be true
	  // in every case, so we don't have to touch the arguments object. The
	  // only additional allocation required is the completion record, which
	  // has a stable shape and so hopefully should be cheap to allocate.
	  function tryCatch(fn, obj, arg) {
	    try {
	      return { type: "normal", arg: fn.call(obj, arg) };
	    } catch (err) {
	      return { type: "throw", arg: err };
	    }
	  }

	  var GenStateSuspendedStart = "suspendedStart";
	  var GenStateSuspendedYield = "suspendedYield";
	  var GenStateExecuting = "executing";
	  var GenStateCompleted = "completed";

	  // Returning this object from the innerFn has the same effect as
	  // breaking out of the dispatch switch statement.
	  var ContinueSentinel = {};

	  // Dummy constructor functions that we use as the .constructor and
	  // .constructor.prototype properties for functions that return Generator
	  // objects. For full spec compliance, you may wish to configure your
	  // minifier not to mangle the names of these two functions.
	  function Generator() {}
	  function GeneratorFunction() {}
	  function GeneratorFunctionPrototype() {}

	  // This is a polyfill for %IteratorPrototype% for environments that
	  // don't natively support it.
	  var IteratorPrototype = {};
	  IteratorPrototype[iteratorSymbol] = function () {
	    return this;
	  };

	  var getProto = Object.getPrototypeOf;
	  var NativeIteratorPrototype = getProto && getProto(getProto(values([])));
	  if (NativeIteratorPrototype &&
	      NativeIteratorPrototype !== Op &&
	      hasOwn.call(NativeIteratorPrototype, iteratorSymbol)) {
	    // This environment has a native %IteratorPrototype%; use it instead
	    // of the polyfill.
	    IteratorPrototype = NativeIteratorPrototype;
	  }

	  var Gp = GeneratorFunctionPrototype.prototype =
	    Generator.prototype = Object.create(IteratorPrototype);
	  GeneratorFunction.prototype = Gp.constructor = GeneratorFunctionPrototype;
	  GeneratorFunctionPrototype.constructor = GeneratorFunction;
	  GeneratorFunction.displayName = define(
	    GeneratorFunctionPrototype,
	    toStringTagSymbol,
	    "GeneratorFunction"
	  );

	  // Helper for defining the .next, .throw, and .return methods of the
	  // Iterator interface in terms of a single ._invoke method.
	  function defineIteratorMethods(prototype) {
	    ["next", "throw", "return"].forEach(function(method) {
	      define(prototype, method, function(arg) {
	        return this._invoke(method, arg);
	      });
	    });
	  }

	  exports.isGeneratorFunction = function(genFun) {
	    var ctor = typeof genFun === "function" && genFun.constructor;
	    return ctor
	      ? ctor === GeneratorFunction ||
	        // For the native GeneratorFunction constructor, the best we can
	        // do is to check its .name property.
	        (ctor.displayName || ctor.name) === "GeneratorFunction"
	      : false;
	  };

	  exports.mark = function(genFun) {
	    if (Object.setPrototypeOf) {
	      Object.setPrototypeOf(genFun, GeneratorFunctionPrototype);
	    } else {
	      genFun.__proto__ = GeneratorFunctionPrototype;
	      define(genFun, toStringTagSymbol, "GeneratorFunction");
	    }
	    genFun.prototype = Object.create(Gp);
	    return genFun;
	  };

	  // Within the body of any async function, `await x` is transformed to
	  // `yield regeneratorRuntime.awrap(x)`, so that the runtime can test
	  // `hasOwn.call(value, "__await")` to determine if the yielded value is
	  // meant to be awaited.
	  exports.awrap = function(arg) {
	    return { __await: arg };
	  };

	  function AsyncIterator(generator, PromiseImpl) {
	    function invoke(method, arg, resolve, reject) {
	      var record = tryCatch(generator[method], generator, arg);
	      if (record.type === "throw") {
	        reject(record.arg);
	      } else {
	        var result = record.arg;
	        var value = result.value;
	        if (value &&
	            typeof value === "object" &&
	            hasOwn.call(value, "__await")) {
	          return PromiseImpl.resolve(value.__await).then(function(value) {
	            invoke("next", value, resolve, reject);
	          }, function(err) {
	            invoke("throw", err, resolve, reject);
	          });
	        }

	        return PromiseImpl.resolve(value).then(function(unwrapped) {
	          // When a yielded Promise is resolved, its final value becomes
	          // the .value of the Promise<{value,done}> result for the
	          // current iteration.
	          result.value = unwrapped;
	          resolve(result);
	        }, function(error) {
	          // If a rejected Promise was yielded, throw the rejection back
	          // into the async generator function so it can be handled there.
	          return invoke("throw", error, resolve, reject);
	        });
	      }
	    }

	    var previousPromise;

	    function enqueue(method, arg) {
	      function callInvokeWithMethodAndArg() {
	        return new PromiseImpl(function(resolve, reject) {
	          invoke(method, arg, resolve, reject);
	        });
	      }

	      return previousPromise =
	        // If enqueue has been called before, then we want to wait until
	        // all previous Promises have been resolved before calling invoke,
	        // so that results are always delivered in the correct order. If
	        // enqueue has not been called before, then it is important to
	        // call invoke immediately, without waiting on a callback to fire,
	        // so that the async generator function has the opportunity to do
	        // any necessary setup in a predictable way. This predictability
	        // is why the Promise constructor synchronously invokes its
	        // executor callback, and why async functions synchronously
	        // execute code before the first await. Since we implement simple
	        // async functions in terms of async generators, it is especially
	        // important to get this right, even though it requires care.
	        previousPromise ? previousPromise.then(
	          callInvokeWithMethodAndArg,
	          // Avoid propagating failures to Promises returned by later
	          // invocations of the iterator.
	          callInvokeWithMethodAndArg
	        ) : callInvokeWithMethodAndArg();
	    }

	    // Define the unified helper method that is used to implement .next,
	    // .throw, and .return (see defineIteratorMethods).
	    this._invoke = enqueue;
	  }

	  defineIteratorMethods(AsyncIterator.prototype);
	  AsyncIterator.prototype[asyncIteratorSymbol] = function () {
	    return this;
	  };
	  exports.AsyncIterator = AsyncIterator;

	  // Note that simple async functions are implemented on top of
	  // AsyncIterator objects; they just return a Promise for the value of
	  // the final result produced by the iterator.
	  exports.async = function(innerFn, outerFn, self, tryLocsList, PromiseImpl) {
	    if (PromiseImpl === void 0) PromiseImpl = Promise;

	    var iter = new AsyncIterator(
	      wrap(innerFn, outerFn, self, tryLocsList),
	      PromiseImpl
	    );

	    return exports.isGeneratorFunction(outerFn)
	      ? iter // If outerFn is a generator, return the full iterator.
	      : iter.next().then(function(result) {
	          return result.done ? result.value : iter.next();
	        });
	  };

	  function makeInvokeMethod(innerFn, self, context) {
	    var state = GenStateSuspendedStart;

	    return function invoke(method, arg) {
	      if (state === GenStateExecuting) {
	        throw new Error("Generator is already running");
	      }

	      if (state === GenStateCompleted) {
	        if (method === "throw") {
	          throw arg;
	        }

	        // Be forgiving, per 25.3.3.3.3 of the spec:
	        // https://people.mozilla.org/~jorendorff/es6-draft.html#sec-generatorresume
	        return doneResult();
	      }

	      context.method = method;
	      context.arg = arg;

	      while (true) {
	        var delegate = context.delegate;
	        if (delegate) {
	          var delegateResult = maybeInvokeDelegate(delegate, context);
	          if (delegateResult) {
	            if (delegateResult === ContinueSentinel) continue;
	            return delegateResult;
	          }
	        }

	        if (context.method === "next") {
	          // Setting context._sent for legacy support of Babel's
	          // function.sent implementation.
	          context.sent = context._sent = context.arg;

	        } else if (context.method === "throw") {
	          if (state === GenStateSuspendedStart) {
	            state = GenStateCompleted;
	            throw context.arg;
	          }

	          context.dispatchException(context.arg);

	        } else if (context.method === "return") {
	          context.abrupt("return", context.arg);
	        }

	        state = GenStateExecuting;

	        var record = tryCatch(innerFn, self, context);
	        if (record.type === "normal") {
	          // If an exception is thrown from innerFn, we leave state ===
	          // GenStateExecuting and loop back for another invocation.
	          state = context.done
	            ? GenStateCompleted
	            : GenStateSuspendedYield;

	          if (record.arg === ContinueSentinel) {
	            continue;
	          }

	          return {
	            value: record.arg,
	            done: context.done
	          };

	        } else if (record.type === "throw") {
	          state = GenStateCompleted;
	          // Dispatch the exception by looping back around to the
	          // context.dispatchException(context.arg) call above.
	          context.method = "throw";
	          context.arg = record.arg;
	        }
	      }
	    };
	  }

	  // Call delegate.iterator[context.method](context.arg) and handle the
	  // result, either by returning a { value, done } result from the
	  // delegate iterator, or by modifying context.method and context.arg,
	  // setting context.delegate to null, and returning the ContinueSentinel.
	  function maybeInvokeDelegate(delegate, context) {
	    var method = delegate.iterator[context.method];
	    if (method === undefined$1) {
	      // A .throw or .return when the delegate iterator has no .throw
	      // method always terminates the yield* loop.
	      context.delegate = null;

	      if (context.method === "throw") {
	        // Note: ["return"] must be used for ES3 parsing compatibility.
	        if (delegate.iterator["return"]) {
	          // If the delegate iterator has a return method, give it a
	          // chance to clean up.
	          context.method = "return";
	          context.arg = undefined$1;
	          maybeInvokeDelegate(delegate, context);

	          if (context.method === "throw") {
	            // If maybeInvokeDelegate(context) changed context.method from
	            // "return" to "throw", let that override the TypeError below.
	            return ContinueSentinel;
	          }
	        }

	        context.method = "throw";
	        context.arg = new TypeError(
	          "The iterator does not provide a 'throw' method");
	      }

	      return ContinueSentinel;
	    }

	    var record = tryCatch(method, delegate.iterator, context.arg);

	    if (record.type === "throw") {
	      context.method = "throw";
	      context.arg = record.arg;
	      context.delegate = null;
	      return ContinueSentinel;
	    }

	    var info = record.arg;

	    if (! info) {
	      context.method = "throw";
	      context.arg = new TypeError("iterator result is not an object");
	      context.delegate = null;
	      return ContinueSentinel;
	    }

	    if (info.done) {
	      // Assign the result of the finished delegate to the temporary
	      // variable specified by delegate.resultName (see delegateYield).
	      context[delegate.resultName] = info.value;

	      // Resume execution at the desired location (see delegateYield).
	      context.next = delegate.nextLoc;

	      // If context.method was "throw" but the delegate handled the
	      // exception, let the outer generator proceed normally. If
	      // context.method was "next", forget context.arg since it has been
	      // "consumed" by the delegate iterator. If context.method was
	      // "return", allow the original .return call to continue in the
	      // outer generator.
	      if (context.method !== "return") {
	        context.method = "next";
	        context.arg = undefined$1;
	      }

	    } else {
	      // Re-yield the result returned by the delegate method.
	      return info;
	    }

	    // The delegate iterator is finished, so forget it and continue with
	    // the outer generator.
	    context.delegate = null;
	    return ContinueSentinel;
	  }

	  // Define Generator.prototype.{next,throw,return} in terms of the
	  // unified ._invoke helper method.
	  defineIteratorMethods(Gp);

	  define(Gp, toStringTagSymbol, "Generator");

	  // A Generator should always return itself as the iterator object when the
	  // @@iterator function is called on it. Some browsers' implementations of the
	  // iterator prototype chain incorrectly implement this, causing the Generator
	  // object to not be returned from this call. This ensures that doesn't happen.
	  // See https://github.com/facebook/regenerator/issues/274 for more details.
	  Gp[iteratorSymbol] = function() {
	    return this;
	  };

	  Gp.toString = function() {
	    return "[object Generator]";
	  };

	  function pushTryEntry(locs) {
	    var entry = { tryLoc: locs[0] };

	    if (1 in locs) {
	      entry.catchLoc = locs[1];
	    }

	    if (2 in locs) {
	      entry.finallyLoc = locs[2];
	      entry.afterLoc = locs[3];
	    }

	    this.tryEntries.push(entry);
	  }

	  function resetTryEntry(entry) {
	    var record = entry.completion || {};
	    record.type = "normal";
	    delete record.arg;
	    entry.completion = record;
	  }

	  function Context(tryLocsList) {
	    // The root entry object (effectively a try statement without a catch
	    // or a finally block) gives us a place to store values thrown from
	    // locations where there is no enclosing try statement.
	    this.tryEntries = [{ tryLoc: "root" }];
	    tryLocsList.forEach(pushTryEntry, this);
	    this.reset(true);
	  }

	  exports.keys = function(object) {
	    var keys = [];
	    for (var key in object) {
	      keys.push(key);
	    }
	    keys.reverse();

	    // Rather than returning an object with a next method, we keep
	    // things simple and return the next function itself.
	    return function next() {
	      while (keys.length) {
	        var key = keys.pop();
	        if (key in object) {
	          next.value = key;
	          next.done = false;
	          return next;
	        }
	      }

	      // To avoid creating an additional object, we just hang the .value
	      // and .done properties off the next function object itself. This
	      // also ensures that the minifier will not anonymize the function.
	      next.done = true;
	      return next;
	    };
	  };

	  function values(iterable) {
	    if (iterable) {
	      var iteratorMethod = iterable[iteratorSymbol];
	      if (iteratorMethod) {
	        return iteratorMethod.call(iterable);
	      }

	      if (typeof iterable.next === "function") {
	        return iterable;
	      }

	      if (!isNaN(iterable.length)) {
	        var i = -1, next = function next() {
	          while (++i < iterable.length) {
	            if (hasOwn.call(iterable, i)) {
	              next.value = iterable[i];
	              next.done = false;
	              return next;
	            }
	          }

	          next.value = undefined$1;
	          next.done = true;

	          return next;
	        };

	        return next.next = next;
	      }
	    }

	    // Return an iterator with no values.
	    return { next: doneResult };
	  }
	  exports.values = values;

	  function doneResult() {
	    return { value: undefined$1, done: true };
	  }

	  Context.prototype = {
	    constructor: Context,

	    reset: function(skipTempReset) {
	      this.prev = 0;
	      this.next = 0;
	      // Resetting context._sent for legacy support of Babel's
	      // function.sent implementation.
	      this.sent = this._sent = undefined$1;
	      this.done = false;
	      this.delegate = null;

	      this.method = "next";
	      this.arg = undefined$1;

	      this.tryEntries.forEach(resetTryEntry);

	      if (!skipTempReset) {
	        for (var name in this) {
	          // Not sure about the optimal order of these conditions:
	          if (name.charAt(0) === "t" &&
	              hasOwn.call(this, name) &&
	              !isNaN(+name.slice(1))) {
	            this[name] = undefined$1;
	          }
	        }
	      }
	    },

	    stop: function() {
	      this.done = true;

	      var rootEntry = this.tryEntries[0];
	      var rootRecord = rootEntry.completion;
	      if (rootRecord.type === "throw") {
	        throw rootRecord.arg;
	      }

	      return this.rval;
	    },

	    dispatchException: function(exception) {
	      if (this.done) {
	        throw exception;
	      }

	      var context = this;
	      function handle(loc, caught) {
	        record.type = "throw";
	        record.arg = exception;
	        context.next = loc;

	        if (caught) {
	          // If the dispatched exception was caught by a catch block,
	          // then let that catch block handle the exception normally.
	          context.method = "next";
	          context.arg = undefined$1;
	        }

	        return !! caught;
	      }

	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        var record = entry.completion;

	        if (entry.tryLoc === "root") {
	          // Exception thrown outside of any try block that could handle
	          // it, so set the completion value of the entire function to
	          // throw the exception.
	          return handle("end");
	        }

	        if (entry.tryLoc <= this.prev) {
	          var hasCatch = hasOwn.call(entry, "catchLoc");
	          var hasFinally = hasOwn.call(entry, "finallyLoc");

	          if (hasCatch && hasFinally) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            } else if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else if (hasCatch) {
	            if (this.prev < entry.catchLoc) {
	              return handle(entry.catchLoc, true);
	            }

	          } else if (hasFinally) {
	            if (this.prev < entry.finallyLoc) {
	              return handle(entry.finallyLoc);
	            }

	          } else {
	            throw new Error("try statement without catch or finally");
	          }
	        }
	      }
	    },

	    abrupt: function(type, arg) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc <= this.prev &&
	            hasOwn.call(entry, "finallyLoc") &&
	            this.prev < entry.finallyLoc) {
	          var finallyEntry = entry;
	          break;
	        }
	      }

	      if (finallyEntry &&
	          (type === "break" ||
	           type === "continue") &&
	          finallyEntry.tryLoc <= arg &&
	          arg <= finallyEntry.finallyLoc) {
	        // Ignore the finally entry if control is not jumping to a
	        // location outside the try/catch block.
	        finallyEntry = null;
	      }

	      var record = finallyEntry ? finallyEntry.completion : {};
	      record.type = type;
	      record.arg = arg;

	      if (finallyEntry) {
	        this.method = "next";
	        this.next = finallyEntry.finallyLoc;
	        return ContinueSentinel;
	      }

	      return this.complete(record);
	    },

	    complete: function(record, afterLoc) {
	      if (record.type === "throw") {
	        throw record.arg;
	      }

	      if (record.type === "break" ||
	          record.type === "continue") {
	        this.next = record.arg;
	      } else if (record.type === "return") {
	        this.rval = this.arg = record.arg;
	        this.method = "return";
	        this.next = "end";
	      } else if (record.type === "normal" && afterLoc) {
	        this.next = afterLoc;
	      }

	      return ContinueSentinel;
	    },

	    finish: function(finallyLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.finallyLoc === finallyLoc) {
	          this.complete(entry.completion, entry.afterLoc);
	          resetTryEntry(entry);
	          return ContinueSentinel;
	        }
	      }
	    },

	    "catch": function(tryLoc) {
	      for (var i = this.tryEntries.length - 1; i >= 0; --i) {
	        var entry = this.tryEntries[i];
	        if (entry.tryLoc === tryLoc) {
	          var record = entry.completion;
	          if (record.type === "throw") {
	            var thrown = record.arg;
	            resetTryEntry(entry);
	          }
	          return thrown;
	        }
	      }

	      // The context.catch method must only be called with a location
	      // argument that corresponds to a known catch block.
	      throw new Error("illegal catch attempt");
	    },

	    delegateYield: function(iterable, resultName, nextLoc) {
	      this.delegate = {
	        iterator: values(iterable),
	        resultName: resultName,
	        nextLoc: nextLoc
	      };

	      if (this.method === "next") {
	        // Deliberately forget the last sent value so that we don't
	        // accidentally pass it on to the delegate.
	        this.arg = undefined$1;
	      }

	      return ContinueSentinel;
	    }
	  };

	  // Regardless of whether this script is executing as a CommonJS module
	  // or not, return the runtime object so that we can declare the variable
	  // regeneratorRuntime in the outer scope, which allows this module to be
	  // injected easily by `bin/regenerator --include-runtime script.js`.
	  return exports;

	}(
	  // If this script is executing as a CommonJS module, use module.exports
	  // as the regeneratorRuntime namespace. Otherwise create a new empty
	  // object. Either way, the resulting object will be used to initialize
	  // the regeneratorRuntime variable at the top of this file.
	   module.exports 
	));

	try {
	  regeneratorRuntime = runtime;
	} catch (accidentalStrictMode) {
	  // This module should not be running in strict mode, so the above
	  // assignment should always work unless something is misconfigured. Just
	  // in case runtime.js accidentally runs in strict mode, we can escape
	  // strict mode using a global Function call. This could conceivably fail
	  // if a Content Security Policy forbids using Function, but in that case
	  // the proper solution is to fix the accidental strict mode problem. If
	  // you've misconfigured your bundler to force strict mode and applied a
	  // CSP to forbid Function, and you're not willing to fix either of those
	  // problems, please detail your unique predicament in a GitHub issue.
	  Function("r", "regeneratorRuntime = r")(runtime);
	}
	});

	var regenerator = runtime_1;

	// `Object.defineProperty` method
	// https://tc39.github.io/ecma262/#sec-object.defineproperty
	_export({ target: 'Object', stat: true, forced: !descriptors, sham: !descriptors }, {
	  defineProperty: objectDefineProperty.f
	});

	var defineProperty_1 = createCommonjsModule(function (module) {
	var Object = path.Object;

	var defineProperty = module.exports = function defineProperty(it, key, desc) {
	  return Object.defineProperty(it, key, desc);
	};

	if (Object.defineProperty.sham) defineProperty.sham = true;
	});

	var defineProperty$3 = defineProperty_1;

	var defineProperty$4 = defineProperty$3;

	function _defineProperty(obj, key, value) {
	  if (key in obj) {
	    defineProperty$4(obj, key, {
	      value: value,
	      enumerable: true,
	      configurable: true,
	      writable: true
	    });
	  } else {
	    obj[key] = value;
	  }

	  return obj;
	}

	var defineProperty$5 = _defineProperty;

	var defineProperty$6 = defineProperty_1;

	var defineProperty$7 = defineProperty$6;

	// `String.prototype.{ codePointAt, at }` methods implementation
	var createMethod$2 = function (CONVERT_TO_STRING) {
	  return function ($this, pos) {
	    var S = String(requireObjectCoercible($this));
	    var position = toInteger(pos);
	    var size = S.length;
	    var first, second;
	    if (position < 0 || position >= size) return CONVERT_TO_STRING ? '' : undefined;
	    first = S.charCodeAt(position);
	    return first < 0xD800 || first > 0xDBFF || position + 1 === size
	      || (second = S.charCodeAt(position + 1)) < 0xDC00 || second > 0xDFFF
	        ? CONVERT_TO_STRING ? S.charAt(position) : first
	        : CONVERT_TO_STRING ? S.slice(position, position + 2) : (first - 0xD800 << 10) + (second - 0xDC00) + 0x10000;
	  };
	};

	var stringMultibyte = {
	  // `String.prototype.codePointAt` method
	  // https://tc39.github.io/ecma262/#sec-string.prototype.codepointat
	  codeAt: createMethod$2(false),
	  // `String.prototype.at` method
	  // https://github.com/mathiasbynens/String.prototype.at
	  charAt: createMethod$2(true)
	};

	var charAt = stringMultibyte.charAt;



	var STRING_ITERATOR = 'String Iterator';
	var setInternalState$2 = internalState.set;
	var getInternalState$2 = internalState.getterFor(STRING_ITERATOR);

	// `String.prototype[@@iterator]` method
	// https://tc39.github.io/ecma262/#sec-string.prototype-@@iterator
	defineIterator(String, 'String', function (iterated) {
	  setInternalState$2(this, {
	    type: STRING_ITERATOR,
	    string: String(iterated),
	    index: 0
	  });
	// `%StringIteratorPrototype%.next` method
	// https://tc39.github.io/ecma262/#sec-%stringiteratorprototype%.next
	}, function next() {
	  var state = getInternalState$2(this);
	  var string = state.string;
	  var index = state.index;
	  var point;
	  if (index >= string.length) return { value: undefined, done: true };
	  point = charAt(string, index);
	  state.index += point.length;
	  return { value: point, done: false };
	});

	var nativePromiseConstructor = global_1.Promise;

	var redefineAll = function (target, src, options) {
	  for (var key in src) {
	    if (options && options.unsafe && target[key]) target[key] = src[key];
	    else redefine(target, key, src[key], options);
	  } return target;
	};

	var SPECIES$2 = wellKnownSymbol('species');

	var setSpecies = function (CONSTRUCTOR_NAME) {
	  var Constructor = getBuiltIn(CONSTRUCTOR_NAME);
	  var defineProperty = objectDefineProperty.f;

	  if (descriptors && Constructor && !Constructor[SPECIES$2]) {
	    defineProperty(Constructor, SPECIES$2, {
	      configurable: true,
	      get: function () { return this; }
	    });
	  }
	};

	var anInstance = function (it, Constructor, name) {
	  if (!(it instanceof Constructor)) {
	    throw TypeError('Incorrect ' + (name ? name + ' ' : '') + 'invocation');
	  } return it;
	};

	var ITERATOR$2 = wellKnownSymbol('iterator');
	var ArrayPrototype$2 = Array.prototype;

	// check on default Array iterator
	var isArrayIteratorMethod = function (it) {
	  return it !== undefined && (iterators.Array === it || ArrayPrototype$2[ITERATOR$2] === it);
	};

	var ITERATOR$3 = wellKnownSymbol('iterator');

	var getIteratorMethod = function (it) {
	  if (it != undefined) return it[ITERATOR$3]
	    || it['@@iterator']
	    || iterators[classof(it)];
	};

	// call something on iterator step with safe closing on error
	var callWithSafeIterationClosing = function (iterator, fn, value, ENTRIES) {
	  try {
	    return ENTRIES ? fn(anObject(value)[0], value[1]) : fn(value);
	  // 7.4.6 IteratorClose(iterator, completion)
	  } catch (error) {
	    var returnMethod = iterator['return'];
	    if (returnMethod !== undefined) anObject(returnMethod.call(iterator));
	    throw error;
	  }
	};

	var iterate_1 = createCommonjsModule(function (module) {
	var Result = function (stopped, result) {
	  this.stopped = stopped;
	  this.result = result;
	};

	var iterate = module.exports = function (iterable, fn, that, AS_ENTRIES, IS_ITERATOR) {
	  var boundFunction = functionBindContext(fn, that, AS_ENTRIES ? 2 : 1);
	  var iterator, iterFn, index, length, result, next, step;

	  if (IS_ITERATOR) {
	    iterator = iterable;
	  } else {
	    iterFn = getIteratorMethod(iterable);
	    if (typeof iterFn != 'function') throw TypeError('Target is not iterable');
	    // optimisation for array iterators
	    if (isArrayIteratorMethod(iterFn)) {
	      for (index = 0, length = toLength(iterable.length); length > index; index++) {
	        result = AS_ENTRIES
	          ? boundFunction(anObject(step = iterable[index])[0], step[1])
	          : boundFunction(iterable[index]);
	        if (result && result instanceof Result) return result;
	      } return new Result(false);
	    }
	    iterator = iterFn.call(iterable);
	  }

	  next = iterator.next;
	  while (!(step = next.call(iterator)).done) {
	    result = callWithSafeIterationClosing(iterator, boundFunction, step.value, AS_ENTRIES);
	    if (typeof result == 'object' && result && result instanceof Result) return result;
	  } return new Result(false);
	};

	iterate.stop = function (result) {
	  return new Result(true, result);
	};
	});

	var ITERATOR$4 = wellKnownSymbol('iterator');
	var SAFE_CLOSING = false;

	try {
	  var called = 0;
	  var iteratorWithReturn = {
	    next: function () {
	      return { done: !!called++ };
	    },
	    'return': function () {
	      SAFE_CLOSING = true;
	    }
	  };
	  iteratorWithReturn[ITERATOR$4] = function () {
	    return this;
	  };
	  // eslint-disable-next-line no-throw-literal
	  Array.from(iteratorWithReturn, function () { throw 2; });
	} catch (error) { /* empty */ }

	var checkCorrectnessOfIteration = function (exec, SKIP_CLOSING) {
	  if (!SKIP_CLOSING && !SAFE_CLOSING) return false;
	  var ITERATION_SUPPORT = false;
	  try {
	    var object = {};
	    object[ITERATOR$4] = function () {
	      return {
	        next: function () {
	          return { done: ITERATION_SUPPORT = true };
	        }
	      };
	    };
	    exec(object);
	  } catch (error) { /* empty */ }
	  return ITERATION_SUPPORT;
	};

	var SPECIES$3 = wellKnownSymbol('species');

	// `SpeciesConstructor` abstract operation
	// https://tc39.github.io/ecma262/#sec-speciesconstructor
	var speciesConstructor = function (O, defaultConstructor) {
	  var C = anObject(O).constructor;
	  var S;
	  return C === undefined || (S = anObject(C)[SPECIES$3]) == undefined ? defaultConstructor : aFunction(S);
	};

	var engineIsIos = /(iphone|ipod|ipad).*applewebkit/i.test(engineUserAgent);

	var location = global_1.location;
	var set$1 = global_1.setImmediate;
	var clear = global_1.clearImmediate;
	var process$1 = global_1.process;
	var MessageChannel = global_1.MessageChannel;
	var Dispatch = global_1.Dispatch;
	var counter = 0;
	var queue = {};
	var ONREADYSTATECHANGE = 'onreadystatechange';
	var defer, channel, port;

	var run = function (id) {
	  // eslint-disable-next-line no-prototype-builtins
	  if (queue.hasOwnProperty(id)) {
	    var fn = queue[id];
	    delete queue[id];
	    fn();
	  }
	};

	var runner = function (id) {
	  return function () {
	    run(id);
	  };
	};

	var listener = function (event) {
	  run(event.data);
	};

	var post = function (id) {
	  // old engines have not location.origin
	  global_1.postMessage(id + '', location.protocol + '//' + location.host);
	};

	// Node.js 0.9+ & IE10+ has setImmediate, otherwise:
	if (!set$1 || !clear) {
	  set$1 = function setImmediate(fn) {
	    var args = [];
	    var i = 1;
	    while (arguments.length > i) args.push(arguments[i++]);
	    queue[++counter] = function () {
	      // eslint-disable-next-line no-new-func
	      (typeof fn == 'function' ? fn : Function(fn)).apply(undefined, args);
	    };
	    defer(counter);
	    return counter;
	  };
	  clear = function clearImmediate(id) {
	    delete queue[id];
	  };
	  // Node.js 0.8-
	  if (classofRaw(process$1) == 'process') {
	    defer = function (id) {
	      process$1.nextTick(runner(id));
	    };
	  // Sphere (JS game engine) Dispatch API
	  } else if (Dispatch && Dispatch.now) {
	    defer = function (id) {
	      Dispatch.now(runner(id));
	    };
	  // Browsers with MessageChannel, includes WebWorkers
	  // except iOS - https://github.com/zloirock/core-js/issues/624
	  } else if (MessageChannel && !engineIsIos) {
	    channel = new MessageChannel();
	    port = channel.port2;
	    channel.port1.onmessage = listener;
	    defer = functionBindContext(port.postMessage, port, 1);
	  // Browsers with postMessage, skip WebWorkers
	  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'
	  } else if (
	    global_1.addEventListener &&
	    typeof postMessage == 'function' &&
	    !global_1.importScripts &&
	    !fails(post) &&
	    location.protocol !== 'file:'
	  ) {
	    defer = post;
	    global_1.addEventListener('message', listener, false);
	  // IE8-
	  } else if (ONREADYSTATECHANGE in documentCreateElement('script')) {
	    defer = function (id) {
	      html.appendChild(documentCreateElement('script'))[ONREADYSTATECHANGE] = function () {
	        html.removeChild(this);
	        run(id);
	      };
	    };
	  // Rest old browsers
	  } else {
	    defer = function (id) {
	      setTimeout(runner(id), 0);
	    };
	  }
	}

	var task = {
	  set: set$1,
	  clear: clear
	};

	var getOwnPropertyDescriptor$4 = objectGetOwnPropertyDescriptor.f;

	var macrotask = task.set;


	var MutationObserver = global_1.MutationObserver || global_1.WebKitMutationObserver;
	var process$2 = global_1.process;
	var Promise$1 = global_1.Promise;
	var IS_NODE = classofRaw(process$2) == 'process';
	// Node.js 11 shows ExperimentalWarning on getting `queueMicrotask`
	var queueMicrotaskDescriptor = getOwnPropertyDescriptor$4(global_1, 'queueMicrotask');
	var queueMicrotask = queueMicrotaskDescriptor && queueMicrotaskDescriptor.value;

	var flush, head, last, notify, toggle, node, promise, then;

	// modern engines have queueMicrotask method
	if (!queueMicrotask) {
	  flush = function () {
	    var parent, fn;
	    if (IS_NODE && (parent = process$2.domain)) parent.exit();
	    while (head) {
	      fn = head.fn;
	      head = head.next;
	      try {
	        fn();
	      } catch (error) {
	        if (head) notify();
	        else last = undefined;
	        throw error;
	      }
	    } last = undefined;
	    if (parent) parent.enter();
	  };

	  // Node.js
	  if (IS_NODE) {
	    notify = function () {
	      process$2.nextTick(flush);
	    };
	  // browsers with MutationObserver, except iOS - https://github.com/zloirock/core-js/issues/339
	  } else if (MutationObserver && !engineIsIos) {
	    toggle = true;
	    node = document.createTextNode('');
	    new MutationObserver(flush).observe(node, { characterData: true });
	    notify = function () {
	      node.data = toggle = !toggle;
	    };
	  // environments with maybe non-completely correct, but existent Promise
	  } else if (Promise$1 && Promise$1.resolve) {
	    // Promise.resolve without an argument throws an error in LG WebOS 2
	    promise = Promise$1.resolve(undefined);
	    then = promise.then;
	    notify = function () {
	      then.call(promise, flush);
	    };
	  // for other environments - macrotask based on:
	  // - setImmediate
	  // - MessageChannel
	  // - window.postMessag
	  // - onreadystatechange
	  // - setTimeout
	  } else {
	    notify = function () {
	      // strange IE + webpack dev server bug - use .call(global)
	      macrotask.call(global_1, flush);
	    };
	  }
	}

	var microtask = queueMicrotask || function (fn) {
	  var task = { fn: fn, next: undefined };
	  if (last) last.next = task;
	  if (!head) {
	    head = task;
	    notify();
	  } last = task;
	};

	var PromiseCapability = function (C) {
	  var resolve, reject;
	  this.promise = new C(function ($$resolve, $$reject) {
	    if (resolve !== undefined || reject !== undefined) throw TypeError('Bad Promise constructor');
	    resolve = $$resolve;
	    reject = $$reject;
	  });
	  this.resolve = aFunction(resolve);
	  this.reject = aFunction(reject);
	};

	// 25.4.1.5 NewPromiseCapability(C)
	var f$7 = function (C) {
	  return new PromiseCapability(C);
	};

	var newPromiseCapability = {
		f: f$7
	};

	var promiseResolve = function (C, x) {
	  anObject(C);
	  if (isObject(x) && x.constructor === C) return x;
	  var promiseCapability = newPromiseCapability.f(C);
	  var resolve = promiseCapability.resolve;
	  resolve(x);
	  return promiseCapability.promise;
	};

	var hostReportErrors = function (a, b) {
	  var console = global_1.console;
	  if (console && console.error) {
	    arguments.length === 1 ? console.error(a) : console.error(a, b);
	  }
	};

	var perform = function (exec) {
	  try {
	    return { error: false, value: exec() };
	  } catch (error) {
	    return { error: true, value: error };
	  }
	};

	var task$1 = task.set;










	var SPECIES$4 = wellKnownSymbol('species');
	var PROMISE = 'Promise';
	var getInternalState$3 = internalState.get;
	var setInternalState$3 = internalState.set;
	var getInternalPromiseState = internalState.getterFor(PROMISE);
	var PromiseConstructor = nativePromiseConstructor;
	var TypeError$1 = global_1.TypeError;
	var document$2 = global_1.document;
	var process$3 = global_1.process;
	var $fetch = getBuiltIn('fetch');
	var newPromiseCapability$1 = newPromiseCapability.f;
	var newGenericPromiseCapability = newPromiseCapability$1;
	var IS_NODE$1 = classofRaw(process$3) == 'process';
	var DISPATCH_EVENT = !!(document$2 && document$2.createEvent && global_1.dispatchEvent);
	var UNHANDLED_REJECTION = 'unhandledrejection';
	var REJECTION_HANDLED = 'rejectionhandled';
	var PENDING = 0;
	var FULFILLED = 1;
	var REJECTED = 2;
	var HANDLED = 1;
	var UNHANDLED = 2;
	var Internal, OwnPromiseCapability, PromiseWrapper;

	var FORCED$1 = isForced_1(PROMISE, function () {
	  var GLOBAL_CORE_JS_PROMISE = inspectSource(PromiseConstructor) !== String(PromiseConstructor);
	  if (!GLOBAL_CORE_JS_PROMISE) {
	    // V8 6.6 (Node 10 and Chrome 66) have a bug with resolving custom thenables
	    // https://bugs.chromium.org/p/chromium/issues/detail?id=830565
	    // We can't detect it synchronously, so just check versions
	    if (engineV8Version === 66) return true;
	    // Unhandled rejections tracking support, NodeJS Promise without it fails @@species test
	    if (!IS_NODE$1 && typeof PromiseRejectionEvent != 'function') return true;
	  }
	  // We need Promise#finally in the pure version for preventing prototype pollution
	  if ( !PromiseConstructor.prototype['finally']) return true;
	  // We can't use @@species feature detection in V8 since it causes
	  // deoptimization and performance degradation
	  // https://github.com/zloirock/core-js/issues/679
	  if (engineV8Version >= 51 && /native code/.test(PromiseConstructor)) return false;
	  // Detect correctness of subclassing with @@species support
	  var promise = PromiseConstructor.resolve(1);
	  var FakePromise = function (exec) {
	    exec(function () { /* empty */ }, function () { /* empty */ });
	  };
	  var constructor = promise.constructor = {};
	  constructor[SPECIES$4] = FakePromise;
	  return !(promise.then(function () { /* empty */ }) instanceof FakePromise);
	});

	var INCORRECT_ITERATION = FORCED$1 || !checkCorrectnessOfIteration(function (iterable) {
	  PromiseConstructor.all(iterable)['catch'](function () { /* empty */ });
	});

	// helpers
	var isThenable = function (it) {
	  var then;
	  return isObject(it) && typeof (then = it.then) == 'function' ? then : false;
	};

	var notify$1 = function (promise, state, isReject) {
	  if (state.notified) return;
	  state.notified = true;
	  var chain = state.reactions;
	  microtask(function () {
	    var value = state.value;
	    var ok = state.state == FULFILLED;
	    var index = 0;
	    // variable length - can't use forEach
	    while (chain.length > index) {
	      var reaction = chain[index++];
	      var handler = ok ? reaction.ok : reaction.fail;
	      var resolve = reaction.resolve;
	      var reject = reaction.reject;
	      var domain = reaction.domain;
	      var result, then, exited;
	      try {
	        if (handler) {
	          if (!ok) {
	            if (state.rejection === UNHANDLED) onHandleUnhandled(promise, state);
	            state.rejection = HANDLED;
	          }
	          if (handler === true) result = value;
	          else {
	            if (domain) domain.enter();
	            result = handler(value); // can throw
	            if (domain) {
	              domain.exit();
	              exited = true;
	            }
	          }
	          if (result === reaction.promise) {
	            reject(TypeError$1('Promise-chain cycle'));
	          } else if (then = isThenable(result)) {
	            then.call(result, resolve, reject);
	          } else resolve(result);
	        } else reject(value);
	      } catch (error) {
	        if (domain && !exited) domain.exit();
	        reject(error);
	      }
	    }
	    state.reactions = [];
	    state.notified = false;
	    if (isReject && !state.rejection) onUnhandled(promise, state);
	  });
	};

	var dispatchEvent = function (name, promise, reason) {
	  var event, handler;
	  if (DISPATCH_EVENT) {
	    event = document$2.createEvent('Event');
	    event.promise = promise;
	    event.reason = reason;
	    event.initEvent(name, false, true);
	    global_1.dispatchEvent(event);
	  } else event = { promise: promise, reason: reason };
	  if (handler = global_1['on' + name]) handler(event);
	  else if (name === UNHANDLED_REJECTION) hostReportErrors('Unhandled promise rejection', reason);
	};

	var onUnhandled = function (promise, state) {
	  task$1.call(global_1, function () {
	    var value = state.value;
	    var IS_UNHANDLED = isUnhandled(state);
	    var result;
	    if (IS_UNHANDLED) {
	      result = perform(function () {
	        if (IS_NODE$1) {
	          process$3.emit('unhandledRejection', value, promise);
	        } else dispatchEvent(UNHANDLED_REJECTION, promise, value);
	      });
	      // Browsers should not trigger `rejectionHandled` event if it was handled here, NodeJS - should
	      state.rejection = IS_NODE$1 || isUnhandled(state) ? UNHANDLED : HANDLED;
	      if (result.error) throw result.value;
	    }
	  });
	};

	var isUnhandled = function (state) {
	  return state.rejection !== HANDLED && !state.parent;
	};

	var onHandleUnhandled = function (promise, state) {
	  task$1.call(global_1, function () {
	    if (IS_NODE$1) {
	      process$3.emit('rejectionHandled', promise);
	    } else dispatchEvent(REJECTION_HANDLED, promise, state.value);
	  });
	};

	var bind = function (fn, promise, state, unwrap) {
	  return function (value) {
	    fn(promise, state, value, unwrap);
	  };
	};

	var internalReject = function (promise, state, value, unwrap) {
	  if (state.done) return;
	  state.done = true;
	  if (unwrap) state = unwrap;
	  state.value = value;
	  state.state = REJECTED;
	  notify$1(promise, state, true);
	};

	var internalResolve = function (promise, state, value, unwrap) {
	  if (state.done) return;
	  state.done = true;
	  if (unwrap) state = unwrap;
	  try {
	    if (promise === value) throw TypeError$1("Promise can't be resolved itself");
	    var then = isThenable(value);
	    if (then) {
	      microtask(function () {
	        var wrapper = { done: false };
	        try {
	          then.call(value,
	            bind(internalResolve, promise, wrapper, state),
	            bind(internalReject, promise, wrapper, state)
	          );
	        } catch (error) {
	          internalReject(promise, wrapper, error, state);
	        }
	      });
	    } else {
	      state.value = value;
	      state.state = FULFILLED;
	      notify$1(promise, state, false);
	    }
	  } catch (error) {
	    internalReject(promise, { done: false }, error, state);
	  }
	};

	// constructor polyfill
	if (FORCED$1) {
	  // 25.4.3.1 Promise(executor)
	  PromiseConstructor = function Promise(executor) {
	    anInstance(this, PromiseConstructor, PROMISE);
	    aFunction(executor);
	    Internal.call(this);
	    var state = getInternalState$3(this);
	    try {
	      executor(bind(internalResolve, this, state), bind(internalReject, this, state));
	    } catch (error) {
	      internalReject(this, state, error);
	    }
	  };
	  // eslint-disable-next-line no-unused-vars
	  Internal = function Promise(executor) {
	    setInternalState$3(this, {
	      type: PROMISE,
	      done: false,
	      notified: false,
	      parent: false,
	      reactions: [],
	      rejection: false,
	      state: PENDING,
	      value: undefined
	    });
	  };
	  Internal.prototype = redefineAll(PromiseConstructor.prototype, {
	    // `Promise.prototype.then` method
	    // https://tc39.github.io/ecma262/#sec-promise.prototype.then
	    then: function then(onFulfilled, onRejected) {
	      var state = getInternalPromiseState(this);
	      var reaction = newPromiseCapability$1(speciesConstructor(this, PromiseConstructor));
	      reaction.ok = typeof onFulfilled == 'function' ? onFulfilled : true;
	      reaction.fail = typeof onRejected == 'function' && onRejected;
	      reaction.domain = IS_NODE$1 ? process$3.domain : undefined;
	      state.parent = true;
	      state.reactions.push(reaction);
	      if (state.state != PENDING) notify$1(this, state, false);
	      return reaction.promise;
	    },
	    // `Promise.prototype.catch` method
	    // https://tc39.github.io/ecma262/#sec-promise.prototype.catch
	    'catch': function (onRejected) {
	      return this.then(undefined, onRejected);
	    }
	  });
	  OwnPromiseCapability = function () {
	    var promise = new Internal();
	    var state = getInternalState$3(promise);
	    this.promise = promise;
	    this.resolve = bind(internalResolve, promise, state);
	    this.reject = bind(internalReject, promise, state);
	  };
	  newPromiseCapability.f = newPromiseCapability$1 = function (C) {
	    return C === PromiseConstructor || C === PromiseWrapper
	      ? new OwnPromiseCapability(C)
	      : newGenericPromiseCapability(C);
	  };
	}

	_export({ global: true, wrap: true, forced: FORCED$1 }, {
	  Promise: PromiseConstructor
	});

	setToStringTag(PromiseConstructor, PROMISE, false, true);
	setSpecies(PROMISE);

	PromiseWrapper = getBuiltIn(PROMISE);

	// statics
	_export({ target: PROMISE, stat: true, forced: FORCED$1 }, {
	  // `Promise.reject` method
	  // https://tc39.github.io/ecma262/#sec-promise.reject
	  reject: function reject(r) {
	    var capability = newPromiseCapability$1(this);
	    capability.reject.call(undefined, r);
	    return capability.promise;
	  }
	});

	_export({ target: PROMISE, stat: true, forced: isPure  }, {
	  // `Promise.resolve` method
	  // https://tc39.github.io/ecma262/#sec-promise.resolve
	  resolve: function resolve(x) {
	    return promiseResolve( this === PromiseWrapper ? PromiseConstructor : this, x);
	  }
	});

	_export({ target: PROMISE, stat: true, forced: INCORRECT_ITERATION }, {
	  // `Promise.all` method
	  // https://tc39.github.io/ecma262/#sec-promise.all
	  all: function all(iterable) {
	    var C = this;
	    var capability = newPromiseCapability$1(C);
	    var resolve = capability.resolve;
	    var reject = capability.reject;
	    var result = perform(function () {
	      var $promiseResolve = aFunction(C.resolve);
	      var values = [];
	      var counter = 0;
	      var remaining = 1;
	      iterate_1(iterable, function (promise) {
	        var index = counter++;
	        var alreadyCalled = false;
	        values.push(undefined);
	        remaining++;
	        $promiseResolve.call(C, promise).then(function (value) {
	          if (alreadyCalled) return;
	          alreadyCalled = true;
	          values[index] = value;
	          --remaining || resolve(values);
	        }, reject);
	      });
	      --remaining || resolve(values);
	    });
	    if (result.error) reject(result.value);
	    return capability.promise;
	  },
	  // `Promise.race` method
	  // https://tc39.github.io/ecma262/#sec-promise.race
	  race: function race(iterable) {
	    var C = this;
	    var capability = newPromiseCapability$1(C);
	    var reject = capability.reject;
	    var result = perform(function () {
	      var $promiseResolve = aFunction(C.resolve);
	      iterate_1(iterable, function (promise) {
	        $promiseResolve.call(C, promise).then(capability.resolve, reject);
	      });
	    });
	    if (result.error) reject(result.value);
	    return capability.promise;
	  }
	});

	// `Promise.allSettled` method
	// https://github.com/tc39/proposal-promise-allSettled
	_export({ target: 'Promise', stat: true }, {
	  allSettled: function allSettled(iterable) {
	    var C = this;
	    var capability = newPromiseCapability.f(C);
	    var resolve = capability.resolve;
	    var reject = capability.reject;
	    var result = perform(function () {
	      var promiseResolve = aFunction(C.resolve);
	      var values = [];
	      var counter = 0;
	      var remaining = 1;
	      iterate_1(iterable, function (promise) {
	        var index = counter++;
	        var alreadyCalled = false;
	        values.push(undefined);
	        remaining++;
	        promiseResolve.call(C, promise).then(function (value) {
	          if (alreadyCalled) return;
	          alreadyCalled = true;
	          values[index] = { status: 'fulfilled', value: value };
	          --remaining || resolve(values);
	        }, function (e) {
	          if (alreadyCalled) return;
	          alreadyCalled = true;
	          values[index] = { status: 'rejected', reason: e };
	          --remaining || resolve(values);
	        });
	      });
	      --remaining || resolve(values);
	    });
	    if (result.error) reject(result.value);
	    return capability.promise;
	  }
	});

	// Safari bug https://bugs.webkit.org/show_bug.cgi?id=200829
	var NON_GENERIC = !!nativePromiseConstructor && fails(function () {
	  nativePromiseConstructor.prototype['finally'].call({ then: function () { /* empty */ } }, function () { /* empty */ });
	});

	// `Promise.prototype.finally` method
	// https://tc39.github.io/ecma262/#sec-promise.prototype.finally
	_export({ target: 'Promise', proto: true, real: true, forced: NON_GENERIC }, {
	  'finally': function (onFinally) {
	    var C = speciesConstructor(this, getBuiltIn('Promise'));
	    var isFunction = typeof onFinally == 'function';
	    return this.then(
	      isFunction ? function (x) {
	        return promiseResolve(C, onFinally()).then(function () { return x; });
	      } : onFinally,
	      isFunction ? function (e) {
	        return promiseResolve(C, onFinally()).then(function () { throw e; });
	      } : onFinally
	    );
	  }
	});

	var promise$1 = path.Promise;

	var setInternalState$4 = internalState.set;
	var getInternalAggregateErrorState = internalState.getterFor('AggregateError');

	var $AggregateError = function AggregateError(errors, message) {
	  var that = this;
	  if (!(that instanceof $AggregateError)) return new $AggregateError(errors, message);
	  if (objectSetPrototypeOf) {
	    that = objectSetPrototypeOf(new Error(message), objectGetPrototypeOf(that));
	  }
	  var errorsArray = [];
	  iterate_1(errors, errorsArray.push, errorsArray);
	  if (descriptors) setInternalState$4(that, { errors: errorsArray, type: 'AggregateError' });
	  else that.errors = errorsArray;
	  if (message !== undefined) createNonEnumerableProperty(that, 'message', String(message));
	  return that;
	};

	$AggregateError.prototype = objectCreate(Error.prototype, {
	  constructor: createPropertyDescriptor(5, $AggregateError),
	  message: createPropertyDescriptor(5, ''),
	  name: createPropertyDescriptor(5, 'AggregateError')
	});

	if (descriptors) objectDefineProperty.f($AggregateError.prototype, 'errors', {
	  get: function () {
	    return getInternalAggregateErrorState(this).errors;
	  },
	  configurable: true
	});

	_export({ global: true }, {
	  AggregateError: $AggregateError
	});

	// `Promise.try` method
	// https://github.com/tc39/proposal-promise-try
	_export({ target: 'Promise', stat: true }, {
	  'try': function (callbackfn) {
	    var promiseCapability = newPromiseCapability.f(this);
	    var result = perform(callbackfn);
	    (result.error ? promiseCapability.reject : promiseCapability.resolve)(result.value);
	    return promiseCapability.promise;
	  }
	});

	var PROMISE_ANY_ERROR = 'No one promise resolved';

	// `Promise.any` method
	// https://github.com/tc39/proposal-promise-any
	_export({ target: 'Promise', stat: true }, {
	  any: function any(iterable) {
	    var C = this;
	    var capability = newPromiseCapability.f(C);
	    var resolve = capability.resolve;
	    var reject = capability.reject;
	    var result = perform(function () {
	      var promiseResolve = aFunction(C.resolve);
	      var errors = [];
	      var counter = 0;
	      var remaining = 1;
	      var alreadyResolved = false;
	      iterate_1(iterable, function (promise) {
	        var index = counter++;
	        var alreadyRejected = false;
	        errors.push(undefined);
	        remaining++;
	        promiseResolve.call(C, promise).then(function (value) {
	          if (alreadyRejected || alreadyResolved) return;
	          alreadyResolved = true;
	          resolve(value);
	        }, function (e) {
	          if (alreadyRejected || alreadyResolved) return;
	          alreadyRejected = true;
	          errors[index] = e;
	          --remaining || reject(new (getBuiltIn('AggregateError'))(errors, PROMISE_ANY_ERROR));
	        });
	      });
	      --remaining || reject(new (getBuiltIn('AggregateError'))(errors, PROMISE_ANY_ERROR));
	    });
	    if (result.error) reject(result.value);
	    return capability.promise;
	  }
	});

	// TODO: Remove from `core-js@4`




	var promise$2 = promise$1;

	var promise$3 = promise$2;

	function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
	  try {
	    var info = gen[key](arg);
	    var value = info.value;
	  } catch (error) {
	    reject(error);
	    return;
	  }

	  if (info.done) {
	    resolve(value);
	  } else {
	    promise$3.resolve(value).then(_next, _throw);
	  }
	}

	function _asyncToGenerator(fn) {
	  return function () {
	    var self = this,
	        args = arguments;
	    return new promise$3(function (resolve, reject) {
	      var gen = fn.apply(self, args);

	      function _next(value) {
	        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
	      }

	      function _throw(err) {
	        asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
	      }

	      _next(undefined);
	    });
	  };
	}

	var asyncToGenerator = _asyncToGenerator;

	var $map = arrayIteration.map;



	var HAS_SPECIES_SUPPORT$1 = arrayMethodHasSpeciesSupport('map');
	// FF49- issue
	var USES_TO_LENGTH$2 = arrayMethodUsesToLength('map');

	// `Array.prototype.map` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.map
	// with adding support of @@species
	_export({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT$1 || !USES_TO_LENGTH$2 }, {
	  map: function map(callbackfn /* , thisArg */) {
	    return $map(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var map = entryVirtual('Array').map;

	var ArrayPrototype$3 = Array.prototype;

	var map_1 = function (it) {
	  var own = it.map;
	  return it === ArrayPrototype$3 || (it instanceof Array && own === ArrayPrototype$3.map) ? map : own;
	};

	var map$1 = map_1;

	var map$2 = map$1;

	var IS_CONCAT_SPREADABLE = wellKnownSymbol('isConcatSpreadable');
	var MAX_SAFE_INTEGER = 0x1FFFFFFFFFFFFF;
	var MAXIMUM_ALLOWED_INDEX_EXCEEDED = 'Maximum allowed index exceeded';

	// We can't use this feature detection in V8 since it causes
	// deoptimization and serious performance degradation
	// https://github.com/zloirock/core-js/issues/679
	var IS_CONCAT_SPREADABLE_SUPPORT = engineV8Version >= 51 || !fails(function () {
	  var array = [];
	  array[IS_CONCAT_SPREADABLE] = false;
	  return array.concat()[0] !== array;
	});

	var SPECIES_SUPPORT = arrayMethodHasSpeciesSupport('concat');

	var isConcatSpreadable = function (O) {
	  if (!isObject(O)) return false;
	  var spreadable = O[IS_CONCAT_SPREADABLE];
	  return spreadable !== undefined ? !!spreadable : isArray(O);
	};

	var FORCED$2 = !IS_CONCAT_SPREADABLE_SUPPORT || !SPECIES_SUPPORT;

	// `Array.prototype.concat` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.concat
	// with adding support of @@isConcatSpreadable and @@species
	_export({ target: 'Array', proto: true, forced: FORCED$2 }, {
	  concat: function concat(arg) { // eslint-disable-line no-unused-vars
	    var O = toObject(this);
	    var A = arraySpeciesCreate(O, 0);
	    var n = 0;
	    var i, k, length, len, E;
	    for (i = -1, length = arguments.length; i < length; i++) {
	      E = i === -1 ? O : arguments[i];
	      if (isConcatSpreadable(E)) {
	        len = toLength(E.length);
	        if (n + len > MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
	        for (k = 0; k < len; k++, n++) if (k in E) createProperty(A, n, E[k]);
	      } else {
	        if (n >= MAX_SAFE_INTEGER) throw TypeError(MAXIMUM_ALLOWED_INDEX_EXCEEDED);
	        createProperty(A, n++, E);
	      }
	    }
	    A.length = n;
	    return A;
	  }
	});

	var concat = entryVirtual('Array').concat;

	var ArrayPrototype$4 = Array.prototype;

	var concat_1 = function (it) {
	  var own = it.concat;
	  return it === ArrayPrototype$4 || (it instanceof Array && own === ArrayPrototype$4.concat) ? concat : own;
	};

	var concat$1 = concat_1;

	var concat$2 = concat$1;

	var nativeAssign = Object.assign;
	var defineProperty$8 = Object.defineProperty;

	// `Object.assign` method
	// https://tc39.github.io/ecma262/#sec-object.assign
	var objectAssign = !nativeAssign || fails(function () {
	  // should have correct order of operations (Edge bug)
	  if (descriptors && nativeAssign({ b: 1 }, nativeAssign(defineProperty$8({}, 'a', {
	    enumerable: true,
	    get: function () {
	      defineProperty$8(this, 'b', {
	        value: 3,
	        enumerable: false
	      });
	    }
	  }), { b: 2 })).b !== 1) return true;
	  // should work with symbols and should have deterministic property order (V8 bug)
	  var A = {};
	  var B = {};
	  // eslint-disable-next-line no-undef
	  var symbol = Symbol();
	  var alphabet = 'abcdefghijklmnopqrst';
	  A[symbol] = 7;
	  alphabet.split('').forEach(function (chr) { B[chr] = chr; });
	  return nativeAssign({}, A)[symbol] != 7 || objectKeys(nativeAssign({}, B)).join('') != alphabet;
	}) ? function assign(target, source) { // eslint-disable-line no-unused-vars
	  var T = toObject(target);
	  var argumentsLength = arguments.length;
	  var index = 1;
	  var getOwnPropertySymbols = objectGetOwnPropertySymbols.f;
	  var propertyIsEnumerable = objectPropertyIsEnumerable.f;
	  while (argumentsLength > index) {
	    var S = indexedObject(arguments[index++]);
	    var keys = getOwnPropertySymbols ? objectKeys(S).concat(getOwnPropertySymbols(S)) : objectKeys(S);
	    var length = keys.length;
	    var j = 0;
	    var key;
	    while (length > j) {
	      key = keys[j++];
	      if (!descriptors || propertyIsEnumerable.call(S, key)) T[key] = S[key];
	    }
	  } return T;
	} : nativeAssign;

	// `Object.assign` method
	// https://tc39.github.io/ecma262/#sec-object.assign
	_export({ target: 'Object', stat: true, forced: Object.assign !== objectAssign }, {
	  assign: objectAssign
	});

	var assign = path.Object.assign;

	var assign$1 = assign;

	var assign$2 = assign$1;

	// `Array.isArray` method
	// https://tc39.github.io/ecma262/#sec-array.isarray
	_export({ target: 'Array', stat: true }, {
	  isArray: isArray
	});

	var isArray$1 = path.Array.isArray;

	var isArray$2 = isArray$1;

	var isArray$3 = isArray$2;

	function _arrayLikeToArray(arr, len) {
	  if (len == null || len > arr.length) len = arr.length;

	  for (var i = 0, arr2 = new Array(len); i < len; i++) {
	    arr2[i] = arr[i];
	  }

	  return arr2;
	}

	var arrayLikeToArray = _arrayLikeToArray;

	function _arrayWithoutHoles(arr) {
	  if (isArray$3(arr)) return arrayLikeToArray(arr);
	}

	var arrayWithoutHoles = _arrayWithoutHoles;

	// `Array.from` method implementation
	// https://tc39.github.io/ecma262/#sec-array.from
	var arrayFrom = function from(arrayLike /* , mapfn = undefined, thisArg = undefined */) {
	  var O = toObject(arrayLike);
	  var C = typeof this == 'function' ? this : Array;
	  var argumentsLength = arguments.length;
	  var mapfn = argumentsLength > 1 ? arguments[1] : undefined;
	  var mapping = mapfn !== undefined;
	  var iteratorMethod = getIteratorMethod(O);
	  var index = 0;
	  var length, result, step, iterator, next, value;
	  if (mapping) mapfn = functionBindContext(mapfn, argumentsLength > 2 ? arguments[2] : undefined, 2);
	  // if the target is not iterable or it's an array with the default iterator - use a simple case
	  if (iteratorMethod != undefined && !(C == Array && isArrayIteratorMethod(iteratorMethod))) {
	    iterator = iteratorMethod.call(O);
	    next = iterator.next;
	    result = new C();
	    for (;!(step = next.call(iterator)).done; index++) {
	      value = mapping ? callWithSafeIterationClosing(iterator, mapfn, [step.value, index], true) : step.value;
	      createProperty(result, index, value);
	    }
	  } else {
	    length = toLength(O.length);
	    result = new C(length);
	    for (;length > index; index++) {
	      value = mapping ? mapfn(O[index], index) : O[index];
	      createProperty(result, index, value);
	    }
	  }
	  result.length = index;
	  return result;
	};

	var INCORRECT_ITERATION$1 = !checkCorrectnessOfIteration(function (iterable) {
	  Array.from(iterable);
	});

	// `Array.from` method
	// https://tc39.github.io/ecma262/#sec-array.from
	_export({ target: 'Array', stat: true, forced: INCORRECT_ITERATION$1 }, {
	  from: arrayFrom
	});

	var from_1 = path.Array.from;

	var from_1$1 = from_1;

	var from_1$2 = from_1$1;

	var ITERATOR$5 = wellKnownSymbol('iterator');

	var isIterable = function (it) {
	  var O = Object(it);
	  return O[ITERATOR$5] !== undefined
	    || '@@iterator' in O
	    // eslint-disable-next-line no-prototype-builtins
	    || iterators.hasOwnProperty(classof(O));
	};

	var isIterable_1 = isIterable;

	var isIterable$1 = isIterable_1;

	// `Symbol.asyncIterator` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.asynciterator
	defineWellKnownSymbol('asyncIterator');

	// `Symbol.hasInstance` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.hasinstance
	defineWellKnownSymbol('hasInstance');

	// `Symbol.isConcatSpreadable` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.isconcatspreadable
	defineWellKnownSymbol('isConcatSpreadable');

	// `Symbol.iterator` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.iterator
	defineWellKnownSymbol('iterator');

	// `Symbol.match` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.match
	defineWellKnownSymbol('match');

	// `Symbol.matchAll` well-known symbol
	defineWellKnownSymbol('matchAll');

	// `Symbol.replace` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.replace
	defineWellKnownSymbol('replace');

	// `Symbol.search` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.search
	defineWellKnownSymbol('search');

	// `Symbol.species` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.species
	defineWellKnownSymbol('species');

	// `Symbol.split` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.split
	defineWellKnownSymbol('split');

	// `Symbol.toPrimitive` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.toprimitive
	defineWellKnownSymbol('toPrimitive');

	// `Symbol.toStringTag` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.tostringtag
	defineWellKnownSymbol('toStringTag');

	// `Symbol.unscopables` well-known symbol
	// https://tc39.github.io/ecma262/#sec-symbol.unscopables
	defineWellKnownSymbol('unscopables');

	// Math[@@toStringTag] property
	// https://tc39.github.io/ecma262/#sec-math-@@tostringtag
	setToStringTag(Math, 'Math', true);

	// JSON[@@toStringTag] property
	// https://tc39.github.io/ecma262/#sec-json-@@tostringtag
	setToStringTag(global_1.JSON, 'JSON', true);

	var symbol = path.Symbol;

	// `Symbol.asyncDispose` well-known symbol
	// https://github.com/tc39/proposal-using-statement
	defineWellKnownSymbol('asyncDispose');

	// `Symbol.dispose` well-known symbol
	// https://github.com/tc39/proposal-using-statement
	defineWellKnownSymbol('dispose');

	// `Symbol.observable` well-known symbol
	// https://github.com/tc39/proposal-observable
	defineWellKnownSymbol('observable');

	// `Symbol.patternMatch` well-known symbol
	// https://github.com/tc39/proposal-pattern-matching
	defineWellKnownSymbol('patternMatch');

	// TODO: remove from `core-js@4`


	defineWellKnownSymbol('replaceAll');

	// TODO: Remove from `core-js@4`


	var symbol$1 = symbol;

	var symbol$2 = symbol$1;

	function _iterableToArray(iter) {
	  if (typeof symbol$2 !== "undefined" && isIterable$1(Object(iter))) return from_1$2(iter);
	}

	var iterableToArray = _iterableToArray;

	var HAS_SPECIES_SUPPORT$2 = arrayMethodHasSpeciesSupport('slice');
	var USES_TO_LENGTH$3 = arrayMethodUsesToLength('slice', { ACCESSORS: true, 0: 0, 1: 2 });

	var SPECIES$5 = wellKnownSymbol('species');
	var nativeSlice = [].slice;
	var max$1 = Math.max;

	// `Array.prototype.slice` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.slice
	// fallback for not array-like ES3 strings and DOM objects
	_export({ target: 'Array', proto: true, forced: !HAS_SPECIES_SUPPORT$2 || !USES_TO_LENGTH$3 }, {
	  slice: function slice(start, end) {
	    var O = toIndexedObject(this);
	    var length = toLength(O.length);
	    var k = toAbsoluteIndex(start, length);
	    var fin = toAbsoluteIndex(end === undefined ? length : end, length);
	    // inline `ArraySpeciesCreate` for usage native `Array#slice` where it's possible
	    var Constructor, result, n;
	    if (isArray(O)) {
	      Constructor = O.constructor;
	      // cross-realm fallback
	      if (typeof Constructor == 'function' && (Constructor === Array || isArray(Constructor.prototype))) {
	        Constructor = undefined;
	      } else if (isObject(Constructor)) {
	        Constructor = Constructor[SPECIES$5];
	        if (Constructor === null) Constructor = undefined;
	      }
	      if (Constructor === Array || Constructor === undefined) {
	        return nativeSlice.call(O, k, fin);
	      }
	    }
	    result = new (Constructor === undefined ? Array : Constructor)(max$1(fin - k, 0));
	    for (n = 0; k < fin; k++, n++) if (k in O) createProperty(result, n, O[k]);
	    result.length = n;
	    return result;
	  }
	});

	var slice = entryVirtual('Array').slice;

	var ArrayPrototype$5 = Array.prototype;

	var slice_1 = function (it) {
	  var own = it.slice;
	  return it === ArrayPrototype$5 || (it instanceof Array && own === ArrayPrototype$5.slice) ? slice : own;
	};

	var slice$1 = slice_1;

	var slice$2 = slice$1;

	function _unsupportedIterableToArray(o, minLen) {
	  var _context;

	  if (!o) return;
	  if (typeof o === "string") return arrayLikeToArray(o, minLen);

	  var n = slice$2(_context = Object.prototype.toString.call(o)).call(_context, 8, -1);

	  if (n === "Object" && o.constructor) n = o.constructor.name;
	  if (n === "Map" || n === "Set") return from_1$2(o);
	  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return arrayLikeToArray(o, minLen);
	}

	var unsupportedIterableToArray = _unsupportedIterableToArray;

	function _nonIterableSpread() {
	  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
	}

	var nonIterableSpread = _nonIterableSpread;

	function _toConsumableArray(arr) {
	  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();
	}

	var toConsumableArray = _toConsumableArray;

	// `SameValue` abstract operation
	// https://tc39.github.io/ecma262/#sec-samevalue
	var sameValue = Object.is || function is(x, y) {
	  // eslint-disable-next-line no-self-compare
	  return x === y ? x !== 0 || 1 / x === 1 / y : x != x && y != y;
	};

	// `Object.is` method
	// https://tc39.github.io/ecma262/#sec-object.is
	_export({ target: 'Object', stat: true }, {
	  is: sameValue
	});

	var is = path.Object.is;

	var is$1 = is;

	var is$2 = is$1;

	var isArray$4 = isArray$1;

	var isArray$5 = isArray$4;

	var slice$3 = [].slice;
	var MSIE = /MSIE .\./.test(engineUserAgent); // <- dirty ie9- check

	var wrap$1 = function (scheduler) {
	  return function (handler, timeout /* , ...arguments */) {
	    var boundArgs = arguments.length > 2;
	    var args = boundArgs ? slice$3.call(arguments, 2) : undefined;
	    return scheduler(boundArgs ? function () {
	      // eslint-disable-next-line no-new-func
	      (typeof handler == 'function' ? handler : Function(handler)).apply(this, args);
	    } : handler, timeout);
	  };
	};

	// ie9- setTimeout & setInterval additional parameters fix
	// https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#timers
	_export({ global: true, bind: true, forced: MSIE }, {
	  // `setTimeout` method
	  // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-settimeout
	  setTimeout: wrap$1(global_1.setTimeout),
	  // `setInterval` method
	  // https://html.spec.whatwg.org/multipage/timers-and-user-prompts.html#dom-setinterval
	  setInterval: wrap$1(global_1.setInterval)
	});

	var setTimeout$1 = path.setTimeout;

	var setTimeout$2 = setTimeout$1;

	var slice$4 = slice_1;

	var slice$5 = slice$4;

	var $includes = arrayIncludes.includes;



	var USES_TO_LENGTH$4 = arrayMethodUsesToLength('indexOf', { ACCESSORS: true, 1: 0 });

	// `Array.prototype.includes` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.includes
	_export({ target: 'Array', proto: true, forced: !USES_TO_LENGTH$4 }, {
	  includes: function includes(el /* , fromIndex = 0 */) {
	    return $includes(this, el, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var includes = entryVirtual('Array').includes;

	var MATCH = wellKnownSymbol('match');

	// `IsRegExp` abstract operation
	// https://tc39.github.io/ecma262/#sec-isregexp
	var isRegexp = function (it) {
	  var isRegExp;
	  return isObject(it) && ((isRegExp = it[MATCH]) !== undefined ? !!isRegExp : classofRaw(it) == 'RegExp');
	};

	var notARegexp = function (it) {
	  if (isRegexp(it)) {
	    throw TypeError("The method doesn't accept regular expressions");
	  } return it;
	};

	var MATCH$1 = wellKnownSymbol('match');

	var correctIsRegexpLogic = function (METHOD_NAME) {
	  var regexp = /./;
	  try {
	    '/./'[METHOD_NAME](regexp);
	  } catch (e) {
	    try {
	      regexp[MATCH$1] = false;
	      return '/./'[METHOD_NAME](regexp);
	    } catch (f) { /* empty */ }
	  } return false;
	};

	// `String.prototype.includes` method
	// https://tc39.github.io/ecma262/#sec-string.prototype.includes
	_export({ target: 'String', proto: true, forced: !correctIsRegexpLogic('includes') }, {
	  includes: function includes(searchString /* , position = 0 */) {
	    return !!~String(requireObjectCoercible(this))
	      .indexOf(notARegexp(searchString), arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var includes$1 = entryVirtual('String').includes;

	var ArrayPrototype$6 = Array.prototype;
	var StringPrototype = String.prototype;

	var includes$2 = function (it) {
	  var own = it.includes;
	  if (it === ArrayPrototype$6 || (it instanceof Array && own === ArrayPrototype$6.includes)) return includes;
	  if (typeof it === 'string' || it === StringPrototype || (it instanceof String && own === StringPrototype.includes)) {
	    return includes$1;
	  } return own;
	};

	var includes$3 = includes$2;

	var includes$4 = includes$3;

	var $indexOf = arrayIncludes.indexOf;



	var nativeIndexOf = [].indexOf;

	var NEGATIVE_ZERO = !!nativeIndexOf && 1 / [1].indexOf(1, -0) < 0;
	var STRICT_METHOD$1 = arrayMethodIsStrict('indexOf');
	var USES_TO_LENGTH$5 = arrayMethodUsesToLength('indexOf', { ACCESSORS: true, 1: 0 });

	// `Array.prototype.indexOf` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.indexof
	_export({ target: 'Array', proto: true, forced: NEGATIVE_ZERO || !STRICT_METHOD$1 || !USES_TO_LENGTH$5 }, {
	  indexOf: function indexOf(searchElement /* , fromIndex = 0 */) {
	    return NEGATIVE_ZERO
	      // convert -0 to +0
	      ? nativeIndexOf.apply(this, arguments) || 0
	      : $indexOf(this, searchElement, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var indexOf$1 = entryVirtual('Array').indexOf;

	var ArrayPrototype$7 = Array.prototype;

	var indexOf_1 = function (it) {
	  var own = it.indexOf;
	  return it === ArrayPrototype$7 || (it instanceof Array && own === ArrayPrototype$7.indexOf) ? indexOf$1 : own;
	};

	var indexOf$2 = indexOf_1;

	var indexOf$3 = indexOf$2;

	function ownKeys$1(object, enumerableOnly) { var keys = keys$3(object); if (getOwnPropertySymbols$2) { var symbols = getOwnPropertySymbols$2(object); if (enumerableOnly) symbols = filter$2(symbols).call(symbols, function (sym) { return getOwnPropertyDescriptor$3(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context10; forEach$2(_context10 = ownKeys$1(Object(source), true)).call(_context10, function (key) { defineProperty$5(target, key, source[key]); }); } else if (getOwnPropertyDescriptors$2) { defineProperties$1(target, getOwnPropertyDescriptors$2(source)); } else { var _context11; forEach$2(_context11 = ownKeys$1(Object(source))).call(_context11, function (key) { defineProperty$7(target, key, getOwnPropertyDescriptor$3(source, key)); }); } } return target; }

	var parseURL = function parseURL(url) {
	  var _context;

	  var tmp = {};

	  forEach$2(_context = url.replace(/^.*?\?/, '').split('&')).call(_context, function (v) {
	    var t = v.split('=');
	    tmp[t[0]] = t[1] ? t[1] : '';
	  });

	  return tmp;
	};

	var random = function random() {
	  var pre = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

	  function S4() {
	    return ((1 + Math.random()) * 0x10000 | 0).toString(16).substring(1);
	  }

	  function guid() {
	    return S4() + S4() + "-" + S4() + "-" + S4() + "-" + S4() + "-" + S4() + S4() + S4();
	  }

	  return pre + guid();
	};

	var stopPropagation = function stopPropagation(e) {
	  window.event ? window.event.cancelBubble = true : e.stopPropagation();
	};

	var getBroswer = function getBroswer() {
	  var sys = {};
	  var ua = navigator.userAgent.toLowerCase();
	  var s;
	  (s = ua.match(/edge\/([\d.]+)/)) ? sys.edge = s[1] : (s = ua.match(/rv:([\d.]+)\) like gecko/)) ? sys.ie = s[1] : (s = ua.match(/msie ([\d.]+)/)) ? sys.ie = s[1] : (s = ua.match(/firefox\/([\d.]+)/)) ? sys.firefox = s[1] : (s = ua.match(/chrome\/([\d.]+)/)) ? sys.chrome = s[1] : (s = ua.match(/opera.([\d.]+)/)) ? sys.opera = s[1] : (s = ua.match(/version\/([\d.]+).*safari/)) ? sys.safari = s[1] : 0;
	  if (sys.edge) return {
	    broswer: "Edge",
	    version: sys.edge
	  };
	  if (sys.ie) return {
	    broswer: "IE",
	    version: sys.ie
	  };
	  if (sys.firefox) return {
	    broswer: "Firefox",
	    version: sys.firefox
	  };
	  if (sys.chrome) return {
	    broswer: "Chrome",
	    version: sys.chrome
	  };
	  if (sys.opera) return {
	    broswer: "Opera",
	    version: sys.opera
	  };
	  if (sys.safari) return {
	    broswer: "Safari",
	    version: sys.safari
	  };
	  return {
	    broswer: "",
	    version: "0"
	  };
	};

	var bind$1 = function _bind(struct, data) {
	  var type = Object.prototype.toString.call(struct);

	  if (type == '[object Object]') {
	    var _context2;

	    var _struct = {};

	    forEach$2(_context2 = keys$3(struct)).call(_context2, function (k) {
	      var hasRelationKey = indexOf$3(k).call(k, '->') > -1;
	      var sourceK = k;
	      var destK = k;

	      if (hasRelationKey) {
	        var keys = k.split('->');
	        sourceK = keys[0];
	        destK = keys[1];
	      }

	      var stype = Object.prototype.toString.call(struct[k]);
	      var val = data[destK];

	      if (stype == '[object Array]') {
	        var s = struct[k][0];

	        if (Object.prototype.toString.call(val) == '[object Array]') {
	          var childItems = [];

	          forEach$2(val).call(val, function (child) {
	            childItems.push(_bind(s, child));
	          });

	          _struct[destK] = childItems;
	        } else {
	          _struct[destK] = [];
	        }
	      } else {
	        _struct[destK] = stype == '[object Object]' ? _bind(data, val) : struct[k](val);
	      }
	    });

	    return _struct;
	  } else {
	    return null;
	  }
	};

	var cloneDeep = function _cloneDeep(data) {
	  var _context3;

	  var type = Object.prototype.toString.call(data);

	  if (!includes$4(_context3 = ['[object Array]', '[object Object]']).call(_context3, type)) {
	    return data;
	  } else {
	    if (type == '[object Array]') {
	      var items = [];

	      forEach$2(data).call(data, function (item) {
	        items.push(_cloneDeep(item));
	      });

	      return item;
	    } else {
	      var _context4;

	      var obj = _objectSpread({}, data);

	      var _obj = {};

	      forEach$2(_context4 = keys$3(obj)).call(_context4, function (k) {
	        _obj[k] = _cloneDeep(obj[k]);
	      });

	      return _obj;
	    }
	  }
	};

	var has$2 = function has(obj, path) {
	  var returnValue = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;
	  var endValue = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
	  var failBack = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;
	  var pathInfo = path.split('.');
	  var x = [];
	  var tmp = {};

	  forEach$2(pathInfo).call(pathInfo, function (v) {
	    if (/\[/.test(v)) {
	      //find [a]b[c] | b[a]c | [a][b]c => a.b.c
	      var arrayPathInfo = v.match(/(\[([^\[\]]+?)\]|[^\[\]]+)+?/g);

	      if (arrayPathInfo !== null) {
	        forEach$2(arrayPathInfo).call(arrayPathInfo, function (q) {
	          x.push(q.replace('[', '').replace(']', ''));
	        });
	      }
	    } else {
	      x.push(v);
	    }
	  });

	  var x_len = x.length;

	  for (var i = 0; i < x_len; i++) {
	    var _context5;

	    var v = x[i];

	    if (!includes$4(_context5 = ['[object Array]', '[object Object]']).call(_context5, Object.prototype.toString.call(obj)) || !(v in obj)) {
	      if (failBack !== null) {
	        failBack(obj, slice$5(x).call(x, i));
	      }

	      return endValue;
	    }

	    tmp = obj;
	    obj = obj[v];
	  }

	  if (failBack !== null) {
	    failBack(tmp, [x[x_len - 1]]);
	  }

	  return returnValue ? obj : true;
	};

	var get$1 = function get(obj, path) {
	  var d = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;
	  var value = has$2(obj, path, true, null);
	  return value === null ? d : value;
	};

	var set$2 = function set(obj, path, d) {
	  has$2(obj, path, false, false, function (obj, pathInfo) {
	    var p_len = pathInfo.length;

	    for (var i = 0; i < p_len; i++) {
	      var v = pathInfo[i];

	      if (i + 1 < p_len) {
	        var tmp = {};
	        obj = obj[v] = tmp;
	      } else {
	        obj[v] = d;
	      }
	    }
	  });
	};

	var resize = function resize(el, cb, _c) {
	  var iframe = document.createElement('iframe');

	  if (_c) {
	    iframe.setAttribute('class', _c);
	  }

	  iframe.setAttribute('style', "\n            width: 100%;\n            height: 100 %;\n            position: absolute;\n            visibility: hidden;\n            margin: 0;\n            padding: 0;\n            border: 0;");
	  el.appendChild(iframe);
	  var oldWidth = el.offsetWidth;
	  var oldHeight = el.offsetHeight;

	  function sizeChange() {
	    var width = el.offsetWidth;
	    var height = el.offsetHeight;

	    if (width !== oldWidth || height !== oldHeight) {
	      cb({
	        width: width,
	        height: height
	      }, {
	        width: oldWidth,
	        height: oldHeight
	      });
	      oldWidth = width;
	      oldHeight = height;
	    }
	  }

	  var timer = 0;

	  iframe.contentWindow.onresize = function () {
	    clearTimeout(timer);
	    timer = setTimeout$2(sizeChange, 20);
	  };
	};

	var getType = function getType(o) {
	  var str = Object.prototype.toString.call(o);
	  return slice$5(str).call(str, 8, str.length - 1);
	};

	var env = function env(ds, d) {
	  if (ds === undefined || ds === '') {
	    return d;
	  }

	  return  ds ;
	};

	var isArray$6 = isArray$5;

	var isString = function isString(item) {
	  return getType(item) === 'String';
	};

	var isObject$1 = function isObject(item) {
	  return getType(item) === 'Object';
	};

	var getRender = function getRender(d, context) {
	  var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : d;
	  return typeof context == "function" ? context.call(d, options) : context;
	};

	var byte2Size = function byte2Size(bytes) {
	  if (bytes === 0) return '0 B';
	  var k = 1024;
	  var sizes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'];
	  var i = Math.floor(Math.log(bytes) / Math.log(k));
	  i = is$2(Infinity, i) || is$2(-Infinity, i) ? 0 : i;
	  var num = bytes / Math.pow(k, i);
	  return num.toPrecision(3) + ' ' + sizes[i];
	};

	var subQuery = function subQuery(url, qs) {
	  var _context6, _context7;

	  if (!url) {
	    return '';
	  }

	  var urlTarget = url.split("#");
	  var urlInfo = urlTarget[0].split("?");
	  var path = urlInfo[0],
	      query = urlInfo[1];
	  var querys = parseURL(query);
	  querys = assign$2.apply(Object, concat$2(_context6 = [{}]).call(_context6, toConsumableArray(querys), toConsumableArray(qs)));
	  return path + "?" + map$2(_context7 = keys$3(querys)).call(_context7, function (query) {
	    var _context8;

	    return concat$2(_context8 = "".concat(query, "=")).call(_context8, querys[query]);
	  }).join("&") + (urlTarget[1] ? "#".concat(urlTarget[1]) : "");
	};

	var limitAction = function limitAction(time, cb) {
	  var ok = true;
	  return function () {
	    if (ok) {
	      ok = false;

	      setTimeout$2(function () {
	        ok = true;
	      }, time * 1000);

	      cb.call(this);
	    }
	  };
	};

	var makeKey = function makeKey(arr, k) {
	  var m = {};
	  isArray$5(arr) && forEach$2(arr).call(arr, function (item) {
	    m[item[k]] = item;
	  });
	  return m;
	};

	var keyBy = function keyBy(arr, k) {
	  var m = {};
	  isArray$5(arr) && forEach$2(arr).call(arr, function (item) {
	    if (m[item[k]] === undefined) {
	      m[item[k]] = [item];
	    } else {
	      m[item[k]].push(item);
	    }
	  });
	  return m;
	};

	var MapMap = function MapMap(obj, cb) {
	  var _context9;

	  return map$2(_context9 = keys$3(obj)).call(_context9, function (k) {
	    return cb(obj[k], k);
	  });
	};

	var tool = {
	  parseURL: parseURL,
	  random: random,
	  stopPropagation: stopPropagation,
	  getBroswer: getBroswer,
	  resize: resize,
	  get: get$1,
	  set: set$2,
	  has: has$2,
	  cloneDeep: cloneDeep,
	  bind: bind$1,
	  getType: getType,
	  env: env,
	  isArray: isArray$6,
	  isString: isString,
	  isObject: isObject$1,
	  getRender: getRender,
	  byte2Size: byte2Size,
	  subQuery: subQuery,
	  limitAction: limitAction,
	  makeKey: makeKey,
	  keyBy: keyBy,
	  MapMap: MapMap
	};

	var validator = {
	  isNotEmpty: function isNotEmpty(v) {
	    return !this.isEmpty(v);
	  },
	  isEmpty: function isEmpty(v) {
	    var type = tool.getType(v);

	    if (type === 'Number' || type === 'Function' || type === 'Boolean') {
	      return false;
	    } else if (type === 'String' && v.length != 0) {
	      return false;
	    } else if (type === 'Object') {
	      return keys$3(v).length === 0;
	    } else if (type === 'Set' || type === ' ') {
	      return v.size === 0;
	    } else if (type === 'Array') {
	      return v.length === 0;
	    } //Null or Undefined


	    return true;
	  }
	};

	var utils = {
	  tool: tool,
	  validator: validator
	};

	function ServiceProvider (app) {
	  this.booted = false;
	  this.providers = [];
	  this.app = app;

	  this.register = function (provider) {
	    this.providers.push(provider);
	    provider.register && provider.register(this.app);

	    if (this.booted) {
	      provider.boot(this.app);
	    }
	  };

	  this.boot = /*#__PURE__*/asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
	    var i;
	    return regenerator.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            if (!this.booted) {
	              _context.next = 2;
	              break;
	            }

	            return _context.abrupt("return");

	          case 2:
	            i = 0;

	          case 3:
	            if (!(i < this.providers.length)) {
	              _context.next = 10;
	              break;
	            }

	            if (!this.providers[i].boot) {
	              _context.next = 7;
	              break;
	            }

	            _context.next = 7;
	            return this.providers[i].boot(this.app);

	          case 7:
	            i++;
	            _context.next = 3;
	            break;

	          case 10:
	            this.booted = true;

	          case 11:
	          case "end":
	            return _context.stop();
	        }
	      }
	    }, _callee, this);
	  }));
	}

	function ownKeys$2(object, enumerableOnly) { var keys = keys$3(object); if (getOwnPropertySymbols$2) { var symbols = getOwnPropertySymbols$2(object); if (enumerableOnly) symbols = filter$2(symbols).call(symbols, function (sym) { return getOwnPropertyDescriptor$3(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$1(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context2; forEach$2(_context2 = ownKeys$2(Object(source), true)).call(_context2, function (key) { defineProperty$5(target, key, source[key]); }); } else if (getOwnPropertyDescriptors$2) { defineProperties$1(target, getOwnPropertyDescriptors$2(source)); } else { var _context3; forEach$2(_context3 = ownKeys$2(Object(source))).call(_context3, function (key) { defineProperty$7(target, key, getOwnPropertyDescriptor$3(source, key)); }); } } return target; }
	function maxiloVue () {
	  this.modules = {};
	  this.binds = {};
	  this.target = false;
	  this.vue = Vue;
	  this.app = null;
	  this.sp = new ServiceProvider(this);
	  this.hooks = {};

	  this.addHook = function (name, hook) {
	    this.hooks[name] = hook;
	  };

	  this.register = function (provider) {
	    this.sp.register(provider);
	  };

	  this.one = function (name) {
	    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
	    return this.binds[name](this, params);
	  };

	  this.make = function (name) {
	    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

	    if (this.modules[name] === undefined) {
	      this.modules[name] = this.binds[name](this, params);
	    }

	    return this.modules[name];
	  };

	  this.bind = function (name, module) {
	    this.binds[name] = module;
	  };

	  this.run = /*#__PURE__*/asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee() {
	    var _this = this;

	    return regenerator.wrap(function _callee$(_context) {
	      while (1) {
	        switch (_context.prev = _context.next) {
	          case 0:
	            _context.next = 2;
	            return this.sp.boot();

	          case 2:
	            defineProperty$7(this.vue.prototype, '$app', {
	              get: function get() {
	                return _this;
	              }
	            });

	            this.app = new this.vue(_objectSpread$1(_objectSpread$1({}, this.hooks), {}, {
	              render: this.target ? function (h) {
	                return h(_this.target);
	              } : function (h) {
	                return h('div', [h('router-view')]);
	              }
	            })).$mount('#app');

	          case 4:
	          case "end":
	            return _context.stop();
	        }
	      }
	    }, _callee, this);
	  }));
	}

	var slice$6 = [].slice;
	var factories = {};

	var construct = function (C, argsLength, args) {
	  if (!(argsLength in factories)) {
	    for (var list = [], i = 0; i < argsLength; i++) list[i] = 'a[' + i + ']';
	    // eslint-disable-next-line no-new-func
	    factories[argsLength] = Function('C,a', 'return new C(' + list.join(',') + ')');
	  } return factories[argsLength](C, args);
	};

	// `Function.prototype.bind` method implementation
	// https://tc39.github.io/ecma262/#sec-function.prototype.bind
	var functionBind = Function.bind || function bind(that /* , ...args */) {
	  var fn = aFunction(this);
	  var partArgs = slice$6.call(arguments, 1);
	  var boundFunction = function bound(/* args... */) {
	    var args = partArgs.concat(slice$6.call(arguments));
	    return this instanceof boundFunction ? construct(fn, args.length, args) : fn.apply(that, args);
	  };
	  if (isObject(fn.prototype)) boundFunction.prototype = fn.prototype;
	  return boundFunction;
	};

	// `Function.prototype.bind` method
	// https://tc39.github.io/ecma262/#sec-function.prototype.bind
	_export({ target: 'Function', proto: true }, {
	  bind: functionBind
	});

	var bind$2 = entryVirtual('Function').bind;

	var FunctionPrototype = Function.prototype;

	var bind_1 = function (it) {
	  var own = it.bind;
	  return it === FunctionPrototype || (it instanceof Function && own === FunctionPrototype.bind) ? bind$2 : own;
	};

	var bind$3 = bind_1;

	var bind$4 = bind$3;

	var route = function route() {
	  var _this = this;

	  this.routes = [];
	  this.more = [];
	  this.middlewares = [];
	  this.currentIndex = 0;
	  this.mGroup = false;

	  this.merge = function (b) {
	    var _this$routes;

	    (_this$routes = _this.routes).push.apply(_this$routes, toConsumableArray(b));
	  };

	  this.add = function (path, component) {
	    var meta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
	    var params = {
	      name: meta.name,
	      path: path,
	      component: component,
	      meta: meta,
	      beforeEnter: meta.beforeEnter
	    };

	    if (_this.middleware.length != 0) {
	      params['meta']['middlewares'] = _this.middlewares;
	      _this.middlewares = [];
	    }

	    _this.currentIndex = _this.routes.push(params);
	    return _this.mgroup ? _this.currentIndex : _this;
	  };

	  this.group = function (path, component, callback) {
	    var meta = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
	    var group = {
	      name: meta.name,
	      path: path,
	      meta: meta,
	      beforeEnter: meta.beforeEnter
	    };

	    if (component != '') {
	      group.component = component;
	    } else {
	      component = h("route-view");
	    }

	    if (_this.middleware.length != 0) {
	      group['meta']['middlewares'] = _this.middlewares;
	      _this.middlewares = [];
	    }

	    var tmp = new routeItem();
	    callback(tmp);
	    group.children = tmp.getRoutes();
	    _this.currentIndex = _this.routes.push(group);
	    return _this.mgroup ? _this.currentIndex : _this;
	  };

	  this.middleware = function (ms) {
	    _this.middlewares = [];

	    if (utils.tool.isString(ms)) {
	      ms = [ms];
	    }

	    _this.middlewares = ms;
	    return _this;
	  }, this.middlewareGroup = function (ms, rs) {
	    _this.mgroup = true;

	    if (utils.tool.isString(ms)) {
	      ms = [ms];
	    }

	    var r = rs();

	    forEach$2(r).call(r, function (v) {
	      _this.currentIndex = v;

	      _this.addMiddleware(ms);
	    });

	    _this.mgroup = false;
	  };

	  this.addMiddleware = function (ms) {
	    if (_this.currentIndex == 0) {
	      return;
	    }

	    if (utils.tool.isString(ms)) {
	      ms = [ms];
	    }

	    _this.routes[_this.currentIndex - 1]['meta'].middlewares = ms;
	    _this.currentIndex = 0;
	  };

	  this.getRoutes = function () {
	    return _this.routes;
	  };
	};

	var routeItem = function routeItem() {
	  var _this2 = this;

	  this.items = [];

	  this.add = function (path, component) {
	    var meta = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

	    _this2.items.push({
	      name: meta.name,
	      path: path,
	      component: component,
	      meta: meta,
	      beforeEnter: meta.beforeEnter
	    });
	  };

	  this.group = function (path, component, callback) {
	    var meta = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};
	    var group = {
	      name: meta.name,
	      path: path,
	      meta: meta,
	      beforeEnter: meta.beforeEnter
	    };

	    if (component != '') {
	      group.component = component;
	    }

	    var tmp = new routeItem();
	    callback(tmp);
	    group.children = tmp.getRoutes();

	    _this2.items.push(group);
	  };

	  this.getRoutes = function () {
	    return _this2.items;
	  };
	};

	var router = function router() {
	  this.instance = null;
	  this.middleware = new middleware();
	  this.mode = 'hash';

	  this.getRoute = function () {
	    if (!this.instance) {
	      this.instance = new route();
	    }

	    return this.instance;
	  };

	  this.getRoutes = function () {
	    return this.instance.routes;
	  };

	  this.run = function (app) {
	    var _this = this;

	    var r = new VueRouter({
	      mode: this.mode,
	      linkActiveClass: 'active',
	      routes: this.instance ? this.instance.routes : []
	    });
	    r.beforeEach( /*#__PURE__*/function () {
	      var _ref = asyncToGenerator( /*#__PURE__*/regenerator.mark(function _callee(to, from, next) {
	        var _context;

	        var globalMs, ms, toMiddle, n, len, i, v, _r;

	        return regenerator.wrap(function _callee$(_context2) {
	          while (1) {
	            switch (_context2.prev = _context2.next) {
	              case 0:
	                globalMs = _this.middleware.globalItems;
	                ms = assign$2({}, globalMs, _this.middleware.items);
	                toMiddle = toConsumableArray(keys$3(globalMs));

	                forEach$2(_context = to.matched).call(_context, function (v) {
	                  if (v.meta.middlewares && v.meta.middlewares != 0) {
	                    toMiddle.push.apply(toMiddle, toConsumableArray(v.meta.middlewares));
	                  }
	                });

	                n = true;
	                len = toMiddle.length;

	                if (!(len != 0)) {
	                  _context2.next = 30;
	                  break;
	                }

	                i = 0;

	              case 8:
	                if (!(i < len)) {
	                  _context2.next = 27;
	                  break;
	                }

	                v = toMiddle[i];

	                if (!ms[v]) {
	                  _context2.next = 24;
	                  break;
	                }

	                _context2.prev = 11;
	                _context2.next = 14;
	                return ms[v](app, to, from, next);

	              case 14:
	                _r = _context2.sent;

	                if (_r) {
	                  _context2.next = 18;
	                  break;
	                }

	                n = false;
	                return _context2.abrupt("break", 27);

	              case 18:
	                _context2.next = 24;
	                break;

	              case 20:
	                _context2.prev = 20;
	                _context2.t0 = _context2["catch"](11);
	                n = false;
	                return _context2.abrupt("break", 27);

	              case 24:
	                i++;
	                _context2.next = 8;
	                break;

	              case 27:
	                n ? next() : '';
	                _context2.next = 31;
	                break;

	              case 30:
	                next();

	              case 31:
	              case "end":
	                return _context2.stop();
	            }
	          }
	        }, _callee, null, [[11, 20]]);
	      }));

	      return function (_x, _x2, _x3) {
	        return _ref.apply(this, arguments);
	      };
	    }());
	    return r;
	  };
	};

	var middleware = function middleware() {
	  this.items = {};
	  this.globalItems = {};

	  this.add = function (key, build) {
	    if (this.items[key]) {
	      console.log('[maxiloVue - router warning] middleware is overwrite: ' + key + '.');
	    }

	    this.items[key] = build;
	  };

	  this.addGlobal = function (key, build) {
	    if (this.globalItems['global-' + key]) {
	      console.log('[maxiloVue - router warning] middleware is overwrite: ' + key + '.');
	    }

	    this.globalItems['global-' + key] = build;
	  };
	};

	function router$1 () {
	  this.register = function (app) {
	    bind$4(app).call(app, "router", function (app) {
	      return new router();
	    });
	  };

	  this.boot = function (app) {
	    app.vue.use(VueRouter);
	    app.addHook('router', app.make("router").run(app));
	  };
	}

	// `Object.create` method
	// https://tc39.github.io/ecma262/#sec-object.create
	_export({ target: 'Object', stat: true, sham: !descriptors }, {
	  create: objectCreate
	});

	var Object$1 = path.Object;

	var create = function create(P, D) {
	  return Object$1.create(P, D);
	};

	var create$1 = create;

	var create$2 = create$1;

	var $findIndex = arrayIteration.findIndex;



	var FIND_INDEX = 'findIndex';
	var SKIPS_HOLES = true;

	var USES_TO_LENGTH$6 = arrayMethodUsesToLength(FIND_INDEX);

	// Shouldn't skip holes
	if (FIND_INDEX in []) Array(1)[FIND_INDEX](function () { SKIPS_HOLES = false; });

	// `Array.prototype.findIndex` method
	// https://tc39.github.io/ecma262/#sec-array.prototype.findindex
	_export({ target: 'Array', proto: true, forced: SKIPS_HOLES || !USES_TO_LENGTH$6 }, {
	  findIndex: function findIndex(callbackfn /* , that = undefined */) {
	    return $findIndex(this, callbackfn, arguments.length > 1 ? arguments[1] : undefined);
	  }
	});

	var findIndex = entryVirtual('Array').findIndex;

	var ArrayPrototype$8 = Array.prototype;

	var findIndex_1 = function (it) {
	  var own = it.findIndex;
	  return it === ArrayPrototype$8 || (it instanceof Array && own === ArrayPrototype$8.findIndex) ? findIndex : own;
	};

	var findIndex$1 = findIndex_1;

	var findIndex$2 = findIndex$1;

	var keys$4 = entryVirtual('Array').keys;

	var keys$5 = keys$4;

	var ArrayPrototype$9 = Array.prototype;

	var DOMIterables$1 = {
	  DOMTokenList: true,
	  NodeList: true
	};

	var keys_1 = function (it) {
	  var own = it.keys;
	  return it === ArrayPrototype$9 || (it instanceof Array && own === ArrayPrototype$9.keys)
	    // eslint-disable-next-line no-prototype-builtins
	    || DOMIterables$1.hasOwnProperty(classof(it)) ? keys$5 : own;
	};

	var keys$6 = keys_1;

	var $stringify$1 = getBuiltIn('JSON', 'stringify');
	var re = /[\uD800-\uDFFF]/g;
	var low = /^[\uD800-\uDBFF]$/;
	var hi = /^[\uDC00-\uDFFF]$/;

	var fix = function (match, offset, string) {
	  var prev = string.charAt(offset - 1);
	  var next = string.charAt(offset + 1);
	  if ((low.test(match) && !hi.test(next)) || (hi.test(match) && !low.test(prev))) {
	    return '\\u' + match.charCodeAt(0).toString(16);
	  } return match;
	};

	var FORCED$3 = fails(function () {
	  return $stringify$1('\uDF06\uD834') !== '"\\udf06\\ud834"'
	    || $stringify$1('\uDEAD') !== '"\\udead"';
	});

	if ($stringify$1) {
	  // https://github.com/tc39/proposal-well-formed-stringify
	  _export({ target: 'JSON', stat: true, forced: FORCED$3 }, {
	    // eslint-disable-next-line no-unused-vars
	    stringify: function stringify(it, replacer, space) {
	      var result = $stringify$1.apply(null, arguments);
	      return typeof result == 'string' ? result.replace(re, fix) : result;
	    }
	  });
	}

	if (!path.JSON) path.JSON = { stringify: JSON.stringify };

	// eslint-disable-next-line no-unused-vars
	var stringify = function stringify(it, replacer, space) {
	  return path.JSON.stringify.apply(null, arguments);
	};

	var stringify$1 = stringify;

	var stringify$2 = stringify$1;

	var ls = window.localStorage;
	var ls$1 = {
	  getItem: function getItem(key) {
	    try {
	      return JSON.parse(ls.getItem(key));
	    } catch (err) {
	      return null;
	    }
	  },
	  setItem: function setItem(key, val) {
	    ls.setItem(key, stringify$2(val));
	  },
	  clear: function clear() {
	    ls.clear();
	  },
	  keys: function keys() {
	    return keys$6(ls).call(ls);
	  },
	  removeItem: function removeItem(key) {
	    ls.removeItem(key);
	  },
	  all: function all() {
	    return ls;
	  }
	};

	function ownKeys$3(object, enumerableOnly) { var keys = keys$3(object); if (getOwnPropertySymbols$2) { var symbols = getOwnPropertySymbols$2(object); if (enumerableOnly) symbols = filter$2(symbols).call(symbols, function (sym) { return getOwnPropertyDescriptor$3(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

	function _objectSpread$2(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { var _context11; forEach$2(_context11 = ownKeys$3(Object(source), true)).call(_context11, function (key) { defineProperty$5(target, key, source[key]); }); } else if (getOwnPropertyDescriptors$2) { defineProperties$1(target, getOwnPropertyDescriptors$2(source)); } else { var _context12; forEach$2(_context12 = ownKeys$3(Object(source))).call(_context12, function (key) { defineProperty$7(target, key, getOwnPropertyDescriptor$3(source, key)); }); } } return target; }

	var store$2 = function store() {
	  this.map = {};
	  this.whitelist = [];
	  this.modules = {};
	  this.instance = null;
	  /* 一次性模块 */

	  this.modulesWhite = [];

	  this.add = function (key, store) {
	    this.modules[key] = store;
	  };

	  this.once = function (key, store) {
	    this.modulesWhite.push(key);
	    this.add(key, store);
	  };

	  this.run = function (store_key, debug) {
	    var _context,
	        _this = this;

	    var ds = ls$1.getItem(store_key);

	    forEach$2(_context = keys$3(this.modules)).call(_context, function (i) {
	      var _context2;

	      if (!includes$4(_context2 = _this.modulesWhite).call(_context2, i)) {
	        _this.modules[i] = _this.depModule(_this.modules[i], ds && ds[i] ? ds[i] : {});
	        map$2(_this)[i] = _this.depState(_this.modules[i]);
	      }
	    });

	    this.instance = new Vuex.Store({
	      modules: this.modules,
	      strict: !debug,
	      plugins: debug ? [this.toLs(store_key)] : [this.toLs(store_key)]
	    });
	    return this.instance;
	  };

	  this.depModule = function (module, ds) {
	    var _this2 = this;

	    var deps = {
	      state: module.state ? module.state : {},
	      getters: module.getters ? module.getters : {},
	      actions: module.actions ? module.actions : {},
	      mutations: module.mutations ? module.mutations : {},
	      namespaced: module.namespaced ? module.namespaced : true
	    };

	    if (ds) {
	      var _context3;

	      forEach$2(_context3 = keys$3(deps.state)).call(_context3, function (k) {
	        //await to fixed Map、 Set and syblm 
	        if (utils.tool.isObject(deps.state[k]) || isArray$5(deps.state[k])) {
	          var _context4;

	          deps.state[k] = bind$4(_context4 = utils.tool).call(_context4, deps.state[k], ds[k] !== undefined ? ds[k] : {});
	        } else {
	          deps.state[k] = ds[k] ? ds[k] : '';
	        }
	      });
	    }

	    if (module.modules) {
	      var _context5;

	      deps.modules = {};

	      forEach$2(_context5 = keys$3(module.modules)).call(_context5, function (i) {
	        return deps.modules[i] = _this2.depModule(module.modules[i], ds && ds[i] !== undefined ? ds[i] : {});
	      });
	    }

	    return deps;
	  };

	  this.depState = function (module) {
	    var _this3 = this;

	    var deps = module.state ? _objectSpread$2({}, module.state) : {};

	    if (module.modules) {
	      var _context6;

	      deps._modules = {};

	      forEach$2(_context6 = keys$3(module.modules)).call(_context6, function (i) {
	        deps._modules[i] = _this3.depState(module.modules[i]);
	      });
	    }

	    return deps;
	  };

	  this.toLs = function (key) {
	    var _this4 = this;

	    var k = key || 'lsKey';
	    return function (store) {
	      store.subscribe(function (mutation, state) {
	        var _context7;

	        if (findIndex$2(_context7 = _this4.whitelist).call(_context7, function (m) {
	          return m === mutation.type;
	        }) < 0) {
	          var _context8;

	          var cd = create$2(null);

	          forEach$2(_context8 = keys$3(state)).call(_context8, function (k) {
	            if (map$2(_this4)[k]) {
	              cd[k] = _this4.copy(state[k], map$2(_this4)[k]);
	            }
	          });

	          ls$1.setItem(k, cd);
	        }
	      });
	    };
	  };

	  this.copy = function (state, map) {
	    var _context9,
	        _this5 = this;

	    if (!state) {
	      return state;
	    }

	    var tmp = utils.tool.isObject(map) ? filter$2(_context9 = keys$3(map)).call(_context9, function (v) {
	      return v != '_modules';
	    }) : map;

	    var d = create$2(null);

	    forEach$2(tmp).call(tmp, function (k) {
	      d[k] = state[k] !== undefined ? state[k] : {};
	    });

	    if (map._modules) {
	      var _context10;

	      forEach$2(_context10 = keys$3(map._modules)).call(_context10, function (i) {
	        d[i] = _this5.copy(state[i], map._modules[i]);
	      });
	    }

	    return d;
	  };
	};

	function store$3 () {
	  this.register = function (app) {
	    bind$4(app).call(app, "store", function (app) {
	      return new store$2();
	    });
	  };

	  this.boot = function (app) {
	    app.vue.use(Vuex);
	    var config = app.make("config");
	    app.addHook('store', app.make("store").run(config.storeKey, config.debug));
	  };
	}

	function i18n () {
	  this.register = function (app) {
	    bind$4(app).call(app, "i18n", function (app) {
	      return new VueI18n({
	        locale: app.make("config").locale
	      });
	    });
	  };

	  this.boot = function (app) {
	    app.vue.use(VueI18n);

	    defineProperty$7(app.vue.prototype, '$tts', {
	      get: function get() {
	        return function () {
	          for (var _len = arguments.length, tmp = new Array(_len), _key = 0; _key < _len; _key++) {
	            tmp[_key] = arguments[_key];
	          }

	          var len = tmp.length,
	              msg = '';

	          for (var i = 0; i < len; i++) {
	            var _context, _context2;

	            msg += isArray$5(tmp[i]) ? this.$t.apply(this, concat$2(_context = [tmp[i][0]]).call(_context, toConsumableArray(slice$5(_context2 = tmp[i]).call(_context2, 1, -1)))) : this.$t(tmp[i]);
	          }

	          return msg;
	        };
	      }
	    });

	    app.addHook('i18n', app.make("i18n"));
	  };
	}

	/**
	  * vee-validate v3.3.8
	  * (c) 2020 Abdelrahman Awad
	  * @license MIT
	  */

	/*! *****************************************************************************
	Copyright (c) Microsoft Corporation.

	Permission to use, copy, modify, and/or distribute this software for any
	purpose with or without fee is hereby granted.

	THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
	REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
	AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
	INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
	LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
	OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
	PERFORMANCE OF THIS SOFTWARE.
	***************************************************************************** */

	var __assign = function() {
	    __assign = Object.assign || function __assign(t) {
	        for (var s, i = 1, n = arguments.length; i < n; i++) {
	            s = arguments[i];
	            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
	        }
	        return t;
	    };
	    return __assign.apply(this, arguments);
	};

	function __awaiter(thisArg, _arguments, P, generator) {
	    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	}

	function __generator(thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
	    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [op[0] & 2, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	}

	function __spreadArrays() {
	    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
	    for (var r = Array(s), k = 0, i = 0; i < il; i++)
	        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
	            r[k] = a[j];
	    return r;
	}

	function isNaN$1(value) {
	    // NaN is the one value that does not equal itself.
	    // eslint-disable-next-line
	    return value !== value;
	}
	function isNullOrUndefined(value) {
	    return value === null || value === undefined;
	}
	function isEmptyArray(arr) {
	    return Array.isArray(arr) && arr.length === 0;
	}
	var isObject$2 = function (obj) {
	    return obj !== null && obj && typeof obj === 'object' && !Array.isArray(obj);
	};
	/**
	 * A reference comparison function with NaN support
	 */
	function isRefEqual(lhs, rhs) {
	    if (isNaN$1(lhs) && isNaN$1(rhs)) {
	        return true;
	    }
	    return lhs === rhs;
	}
	/**
	 * Shallow object comparison.
	 */
	function isEqual(lhs, rhs) {
	    if (lhs instanceof RegExp && rhs instanceof RegExp) {
	        return isEqual(lhs.source, rhs.source) && isEqual(lhs.flags, rhs.flags);
	    }
	    if (Array.isArray(lhs) && Array.isArray(rhs)) {
	        if (lhs.length !== rhs.length)
	            return false;
	        for (var i = 0; i < lhs.length; i++) {
	            if (!isEqual(lhs[i], rhs[i])) {
	                return false;
	            }
	        }
	        return true;
	    }
	    // if both are objects, compare each key recursively.
	    if (isObject$2(lhs) && isObject$2(rhs)) {
	        return (Object.keys(lhs).every(function (key) {
	            return isEqual(lhs[key], rhs[key]);
	        }) &&
	            Object.keys(rhs).every(function (key) {
	                return isEqual(lhs[key], rhs[key]);
	            }));
	    }
	    return isRefEqual(lhs, rhs);
	}
	// Checks if a given value is not an empty string or null or undefined.
	function isSpecified(val) {
	    if (val === '') {
	        return false;
	    }
	    return !isNullOrUndefined(val);
	}
	function isCallable(fn) {
	    return typeof fn === 'function';
	}
	function isLocator(value) {
	    return isCallable(value) && !!value.__locatorRef;
	}

	function findIndex$3(arrayLike, predicate) {
	    var array = Array.isArray(arrayLike) ? arrayLike : toArray(arrayLike);
	    if (isCallable(array.findIndex)) {
	        return array.findIndex(predicate);
	    }
	    /* istanbul ignore next */
	    for (var i = 0; i < array.length; i++) {
	        if (predicate(array[i], i)) {
	            return i;
	        }
	    }
	    /* istanbul ignore next */
	    return -1;
	}
	/**
	 * finds the first element that satisfies the predicate callback, polyfills array.find
	 */
	function find(arrayLike, predicate) {
	    var array = Array.isArray(arrayLike) ? arrayLike : toArray(arrayLike);
	    var idx = findIndex$3(array, predicate);
	    return idx === -1 ? undefined : array[idx];
	}
	function includes$5(collection, item) {
	    return collection.indexOf(item) !== -1;
	}
	/**
	 * Converts an array-like object to array, provides a simple polyfill for Array.from
	 */
	function toArray(arrayLike) {
	    if (isCallable(Array.from)) {
	        return Array.from(arrayLike);
	    }
	    /* istanbul ignore next */
	    return _copyArray(arrayLike);
	}
	/* istanbul ignore next */
	function _copyArray(arrayLike) {
	    var array = [];
	    var length = arrayLike.length;
	    for (var i = 0; i < length; i++) {
	        array.push(arrayLike[i]);
	    }
	    return array;
	}
	function values(obj) {
	    if (isCallable(Object.values)) {
	        return Object.values(obj);
	    }
	    // fallback to keys()
	    /* istanbul ignore next */
	    return Object.keys(obj).map(function (k) { return obj[k]; });
	}
	function merge(target, source) {
	    Object.keys(source).forEach(function (key) {
	        if (isObject$2(source[key])) {
	            if (!target[key]) {
	                target[key] = {};
	            }
	            merge(target[key], source[key]);
	            return;
	        }
	        target[key] = source[key];
	    });
	    return target;
	}

	function createFlags() {
	    return {
	        untouched: true,
	        touched: false,
	        dirty: false,
	        pristine: true,
	        valid: false,
	        invalid: false,
	        validated: false,
	        pending: false,
	        required: false,
	        changed: false,
	        passed: false,
	        failed: false
	    };
	}
	function debounce(fn, wait, token) {
	    if (wait === void 0) { wait = 0; }
	    if (token === void 0) { token = { cancelled: false }; }
	    if (wait === 0) {
	        return fn;
	    }
	    var timeout;
	    return function () {
	        var args = [];
	        for (var _i = 0; _i < arguments.length; _i++) {
	            args[_i] = arguments[_i];
	        }
	        var later = function () {
	            timeout = undefined;
	            // check if the fn call was cancelled.
	            if (!token.cancelled)
	                fn.apply(void 0, args);
	        };
	        // because we might want to use Node.js setTimout for SSR.
	        clearTimeout(timeout);
	        timeout = setTimeout(later, wait);
	    };
	}

	/**
	 * Emits a warning to the console
	 */
	function warn(message) {
	    console.warn("[vee-validate] " + message);
	}
	/**
	 * Replaces placeholder values in a string with their actual values
	 */
	function interpolate(template, values) {
	    return template.replace(/{([^}]+)}/g, function (_, p) {
	        return p in values ? values[p] : "{" + p + "}";
	    });
	}

	var RULES = {};
	function normalizeSchema(schema) {
	    var _a;
	    if ((_a = schema.params) === null || _a === void 0 ? void 0 : _a.length) {
	        schema.params = schema.params.map(function (param) {
	            if (typeof param === 'string') {
	                return { name: param };
	            }
	            return param;
	        });
	    }
	    return schema;
	}
	var RuleContainer = /** @class */ (function () {
	    function RuleContainer() {
	    }
	    RuleContainer.extend = function (name, schema) {
	        // if rule already exists, overwrite it.
	        var rule = normalizeSchema(schema);
	        if (RULES[name]) {
	            RULES[name] = merge(RULES[name], schema);
	            return;
	        }
	        RULES[name] = __assign({ lazy: false, computesRequired: false }, rule);
	    };
	    RuleContainer.isLazy = function (name) {
	        var _a;
	        return !!((_a = RULES[name]) === null || _a === void 0 ? void 0 : _a.lazy);
	    };
	    RuleContainer.isRequireRule = function (name) {
	        var _a;
	        return !!((_a = RULES[name]) === null || _a === void 0 ? void 0 : _a.computesRequired);
	    };
	    RuleContainer.getRuleDefinition = function (ruleName) {
	        return RULES[ruleName];
	    };
	    return RuleContainer;
	}());
	/**
	 * Adds a custom validator to the list of validation rules.
	 */
	function extend(name, schema) {
	    // makes sure new rules are properly formatted.
	    guardExtend(name, schema);
	    // Full schema object.
	    if (typeof schema === 'object') {
	        RuleContainer.extend(name, schema);
	        return;
	    }
	    RuleContainer.extend(name, {
	        validate: schema
	    });
	}
	/**
	 * Guards from extension violations.
	 */
	function guardExtend(name, validator) {
	    if (isCallable(validator)) {
	        return;
	    }
	    if (isCallable(validator.validate)) {
	        return;
	    }
	    if (RuleContainer.getRuleDefinition(name)) {
	        return;
	    }
	    throw new Error("Extension Error: The validator '" + name + "' must be a function or have a 'validate' method.");
	}

	var DEFAULT_CONFIG = {
	    defaultMessage: "{_field_} is not valid.",
	    skipOptional: true,
	    classes: {
	        touched: 'touched',
	        untouched: 'untouched',
	        valid: 'valid',
	        invalid: 'invalid',
	        pristine: 'pristine',
	        dirty: 'dirty' // control has been interacted with
	    },
	    bails: true,
	    mode: 'aggressive',
	    useConstraintAttrs: true
	};
	var currentConfig = __assign({}, DEFAULT_CONFIG);
	var getConfig = function () { return currentConfig; };
	var setConfig = function (newConf) {
	    currentConfig = __assign(__assign({}, currentConfig), newConf);
	};

	/**
	 * Normalizes the given rules expression.
	 */
	function normalizeRules(rules) {
	    // if falsy value return an empty object.
	    var acc = {};
	    Object.defineProperty(acc, '_$$isNormalized', {
	        value: true,
	        writable: false,
	        enumerable: false,
	        configurable: false
	    });
	    if (!rules) {
	        return acc;
	    }
	    // Object is already normalized, skip.
	    if (isObject$2(rules) && rules._$$isNormalized) {
	        return rules;
	    }
	    if (isObject$2(rules)) {
	        return Object.keys(rules).reduce(function (prev, curr) {
	            var params = [];
	            if (rules[curr] === true) {
	                params = [];
	            }
	            else if (Array.isArray(rules[curr])) {
	                params = rules[curr];
	            }
	            else if (isObject$2(rules[curr])) {
	                params = rules[curr];
	            }
	            else {
	                params = [rules[curr]];
	            }
	            if (rules[curr] !== false) {
	                prev[curr] = buildParams(curr, params);
	            }
	            return prev;
	        }, acc);
	    }
	    /* istanbul ignore if */
	    if (typeof rules !== 'string') {
	        warn('rules must be either a string or an object.');
	        return acc;
	    }
	    return rules.split('|').reduce(function (prev, rule) {
	        var parsedRule = parseRule(rule);
	        if (!parsedRule.name) {
	            return prev;
	        }
	        prev[parsedRule.name] = buildParams(parsedRule.name, parsedRule.params);
	        return prev;
	    }, acc);
	}
	function buildParams(ruleName, provided) {
	    var ruleSchema = RuleContainer.getRuleDefinition(ruleName);
	    if (!ruleSchema) {
	        return provided;
	    }
	    var params = {};
	    if (!ruleSchema.params && !Array.isArray(provided)) {
	        throw new Error('You provided an object params to a rule that has no defined schema.');
	    }
	    // Rule probably uses an array for their args, keep it as is.
	    if (Array.isArray(provided) && !ruleSchema.params) {
	        return provided;
	    }
	    var definedParams;
	    // collect the params schema.
	    if (!ruleSchema.params || (ruleSchema.params.length < provided.length && Array.isArray(provided))) {
	        var lastDefinedParam_1;
	        // collect any additional parameters in the last item.
	        definedParams = provided.map(function (_, idx) {
	            var _a;
	            var param = (_a = ruleSchema.params) === null || _a === void 0 ? void 0 : _a[idx];
	            lastDefinedParam_1 = param || lastDefinedParam_1;
	            if (!param) {
	                param = lastDefinedParam_1;
	            }
	            return param;
	        });
	    }
	    else {
	        definedParams = ruleSchema.params;
	    }
	    // Match the provided array length with a temporary schema.
	    for (var i = 0; i < definedParams.length; i++) {
	        var options = definedParams[i];
	        var value = options.default;
	        // if the provided is an array, map element value.
	        if (Array.isArray(provided)) {
	            if (i in provided) {
	                value = provided[i];
	            }
	        }
	        else {
	            // If the param exists in the provided object.
	            if (options.name in provided) {
	                value = provided[options.name];
	                // if the provided is the first param value.
	            }
	            else if (definedParams.length === 1) {
	                value = provided;
	            }
	        }
	        // if the param is a target, resolve the target value.
	        if (options.isTarget) {
	            value = createLocator(value, options.cast);
	        }
	        // A target param using interpolation
	        if (typeof value === 'string' && value[0] === '@') {
	            value = createLocator(value.slice(1), options.cast);
	        }
	        // If there is a transformer defined.
	        if (!isLocator(value) && options.cast) {
	            value = options.cast(value);
	        }
	        // already been set, probably multiple values.
	        if (params[options.name]) {
	            params[options.name] = Array.isArray(params[options.name]) ? params[options.name] : [params[options.name]];
	            params[options.name].push(value);
	        }
	        else {
	            // set the value.
	            params[options.name] = value;
	        }
	    }
	    return params;
	}
	/**
	 * Parses a rule string expression.
	 */
	var parseRule = function (rule) {
	    var params = [];
	    var name = rule.split(':')[0];
	    if (includes$5(rule, ':')) {
	        params = rule
	            .split(':')
	            .slice(1)
	            .join(':')
	            .split(',');
	    }
	    return { name: name, params: params };
	};
	function createLocator(value, castFn) {
	    var locator = function (crossTable) {
	        var val = crossTable[value];
	        return castFn ? castFn(val) : val;
	    };
	    locator.__locatorRef = value;
	    return locator;
	}
	function extractLocators(params) {
	    if (Array.isArray(params)) {
	        return params.filter(isLocator);
	    }
	    return Object.keys(params)
	        .filter(function (key) { return isLocator(params[key]); })
	        .map(function (key) { return params[key]; });
	}

	/**
	 * Validates a value against the rules.
	 */
	function validate(value, rules, options) {
	    if (options === void 0) { options = {}; }
	    return __awaiter(this, void 0, void 0, function () {
	        var shouldBail, skipIfEmpty, field, result, errors, failedRules, regenerateMap;
	        return __generator(this, function (_a) {
	            switch (_a.label) {
	                case 0:
	                    shouldBail = options === null || options === void 0 ? void 0 : options.bails;
	                    skipIfEmpty = options === null || options === void 0 ? void 0 : options.skipIfEmpty;
	                    field = {
	                        name: (options === null || options === void 0 ? void 0 : options.name) || '{field}',
	                        rules: normalizeRules(rules),
	                        bails: shouldBail !== null && shouldBail !== void 0 ? shouldBail : true,
	                        skipIfEmpty: skipIfEmpty !== null && skipIfEmpty !== void 0 ? skipIfEmpty : true,
	                        forceRequired: false,
	                        crossTable: (options === null || options === void 0 ? void 0 : options.values) || {},
	                        names: (options === null || options === void 0 ? void 0 : options.names) || {},
	                        customMessages: (options === null || options === void 0 ? void 0 : options.customMessages) || {}
	                    };
	                    return [4 /*yield*/, _validate(field, value, options)];
	                case 1:
	                    result = _a.sent();
	                    errors = [];
	                    failedRules = {};
	                    regenerateMap = {};
	                    result.errors.forEach(function (e) {
	                        var msg = e.msg();
	                        errors.push(msg);
	                        failedRules[e.rule] = msg;
	                        regenerateMap[e.rule] = e.msg;
	                    });
	                    return [2 /*return*/, {
	                            valid: result.valid,
	                            errors: errors,
	                            failedRules: failedRules,
	                            regenerateMap: regenerateMap
	                        }];
	            }
	        });
	    });
	}
	/**
	 * Starts the validation process.
	 */
	function _validate(field, value, _a) {
	    var _b = (_a === void 0 ? {} : _a).isInitial, isInitial = _b === void 0 ? false : _b;
	    return __awaiter(this, void 0, void 0, function () {
	        var _c, shouldSkip, errors, rules, length, i, rule, result;
	        return __generator(this, function (_d) {
	            switch (_d.label) {
	                case 0: return [4 /*yield*/, _shouldSkip(field, value)];
	                case 1:
	                    _c = _d.sent(), shouldSkip = _c.shouldSkip, errors = _c.errors;
	                    if (shouldSkip) {
	                        return [2 /*return*/, {
	                                valid: !errors.length,
	                                errors: errors
	                            }];
	                    }
	                    rules = Object.keys(field.rules).filter(function (rule) { return !RuleContainer.isRequireRule(rule); });
	                    length = rules.length;
	                    i = 0;
	                    _d.label = 2;
	                case 2:
	                    if (!(i < length)) return [3 /*break*/, 5];
	                    if (isInitial && RuleContainer.isLazy(rules[i])) {
	                        return [3 /*break*/, 4];
	                    }
	                    rule = rules[i];
	                    return [4 /*yield*/, _test(field, value, {
	                            name: rule,
	                            params: field.rules[rule]
	                        })];
	                case 3:
	                    result = _d.sent();
	                    if (!result.valid && result.error) {
	                        errors.push(result.error);
	                        if (field.bails) {
	                            return [2 /*return*/, {
	                                    valid: false,
	                                    errors: errors
	                                }];
	                        }
	                    }
	                    _d.label = 4;
	                case 4:
	                    i++;
	                    return [3 /*break*/, 2];
	                case 5: return [2 /*return*/, {
	                        valid: !errors.length,
	                        errors: errors
	                    }];
	            }
	        });
	    });
	}
	function _shouldSkip(field, value) {
	    return __awaiter(this, void 0, void 0, function () {
	        var requireRules, length, errors, isEmpty, isEmptyAndOptional, isRequired, i, rule, result;
	        return __generator(this, function (_a) {
	            switch (_a.label) {
	                case 0:
	                    requireRules = Object.keys(field.rules).filter(RuleContainer.isRequireRule);
	                    length = requireRules.length;
	                    errors = [];
	                    isEmpty = isNullOrUndefined(value) || value === '' || isEmptyArray(value);
	                    isEmptyAndOptional = isEmpty && field.skipIfEmpty;
	                    isRequired = false;
	                    i = 0;
	                    _a.label = 1;
	                case 1:
	                    if (!(i < length)) return [3 /*break*/, 4];
	                    rule = requireRules[i];
	                    return [4 /*yield*/, _test(field, value, {
	                            name: rule,
	                            params: field.rules[rule]
	                        })];
	                case 2:
	                    result = _a.sent();
	                    if (!isObject$2(result)) {
	                        throw new Error('Require rules has to return an object (see docs)');
	                    }
	                    if (result.required) {
	                        isRequired = true;
	                    }
	                    if (!result.valid && result.error) {
	                        errors.push(result.error);
	                        // Exit early as the field is required and failed validation.
	                        if (field.bails) {
	                            return [2 /*return*/, {
	                                    shouldSkip: true,
	                                    errors: errors
	                                }];
	                        }
	                    }
	                    _a.label = 3;
	                case 3:
	                    i++;
	                    return [3 /*break*/, 1];
	                case 4:
	                    if (isEmpty && !isRequired && !field.skipIfEmpty) {
	                        return [2 /*return*/, {
	                                shouldSkip: false,
	                                errors: errors
	                            }];
	                    }
	                    // field is configured to run through the pipeline regardless
	                    if (!field.bails && !isEmptyAndOptional) {
	                        return [2 /*return*/, {
	                                shouldSkip: false,
	                                errors: errors
	                            }];
	                    }
	                    // skip if the field is not required and has an empty value.
	                    return [2 /*return*/, {
	                            shouldSkip: !isRequired && isEmpty,
	                            errors: errors
	                        }];
	            }
	        });
	    });
	}
	/**
	 * Tests a single input value against a rule.
	 */
	function _test(field, value, rule) {
	    return __awaiter(this, void 0, void 0, function () {
	        var ruleSchema, normalizedValue, params, result, values_1;
	        return __generator(this, function (_a) {
	            switch (_a.label) {
	                case 0:
	                    ruleSchema = RuleContainer.getRuleDefinition(rule.name);
	                    if (!ruleSchema || !ruleSchema.validate) {
	                        throw new Error("No such validator '" + rule.name + "' exists.");
	                    }
	                    normalizedValue = ruleSchema.castValue ? ruleSchema.castValue(value) : value;
	                    params = fillTargetValues(rule.params, field.crossTable);
	                    return [4 /*yield*/, ruleSchema.validate(normalizedValue, params)];
	                case 1:
	                    result = _a.sent();
	                    if (typeof result === 'string') {
	                        values_1 = __assign(__assign({}, (params || {})), { _field_: field.name, _value_: value, _rule_: rule.name });
	                        return [2 /*return*/, {
	                                valid: false,
	                                error: { rule: rule.name, msg: function () { return interpolate(result, values_1); } }
	                            }];
	                    }
	                    if (!isObject$2(result)) {
	                        result = { valid: result };
	                    }
	                    return [2 /*return*/, {
	                            valid: result.valid,
	                            required: result.required,
	                            error: result.valid ? undefined : _generateFieldError(field, value, ruleSchema, rule.name, params)
	                        }];
	            }
	        });
	    });
	}
	/**
	 * Generates error messages.
	 */
	function _generateFieldError(field, value, ruleSchema, ruleName, params) {
	    var _a;
	    var message = (_a = field.customMessages[ruleName]) !== null && _a !== void 0 ? _a : ruleSchema.message;
	    var ruleTargets = _getRuleTargets(field, ruleSchema, ruleName);
	    var _b = _getUserTargets(field, ruleSchema, ruleName, message), userTargets = _b.userTargets, userMessage = _b.userMessage;
	    var values = __assign(__assign(__assign(__assign({}, (params || {})), { _field_: field.name, _value_: value, _rule_: ruleName }), ruleTargets), userTargets);
	    return {
	        msg: function () { return _normalizeMessage(userMessage || getConfig().defaultMessage, field.name, values); },
	        rule: ruleName
	    };
	}
	function _getRuleTargets(field, ruleSchema, ruleName) {
	    var params = ruleSchema.params;
	    if (!params) {
	        return {};
	    }
	    var numTargets = params.filter(function (param) { return param.isTarget; }).length;
	    if (numTargets <= 0) {
	        return {};
	    }
	    var names = {};
	    var ruleConfig = field.rules[ruleName];
	    if (!Array.isArray(ruleConfig) && isObject$2(ruleConfig)) {
	        ruleConfig = params.map(function (param) {
	            return ruleConfig[param.name];
	        });
	    }
	    for (var index = 0; index < params.length; index++) {
	        var param = params[index];
	        var key = ruleConfig[index];
	        if (!isLocator(key)) {
	            continue;
	        }
	        key = key.__locatorRef;
	        var name_1 = field.names[key] || key;
	        names[param.name] = name_1;
	        names["_" + param.name + "_"] = field.crossTable[key];
	    }
	    return names;
	}
	function _getUserTargets(field, ruleSchema, ruleName, userMessage) {
	    var userTargets = {};
	    var rules = field.rules[ruleName];
	    var params = ruleSchema.params || [];
	    // early return if no rules
	    if (!rules) {
	        return {};
	    }
	    // check all rules to convert targets
	    Object.keys(rules).forEach(function (key, index) {
	        // get the rule
	        var rule = rules[key];
	        if (!isLocator(rule)) {
	            return {};
	        }
	        // get associated parameter
	        var param = params[index];
	        if (!param) {
	            return {};
	        }
	        // grab the name of the target
	        var name = rule.__locatorRef;
	        userTargets[param.name] = field.names[name] || name;
	        userTargets["_" + param.name + "_"] = field.crossTable[name];
	    });
	    return {
	        userTargets: userTargets,
	        userMessage: userMessage
	    };
	}
	function _normalizeMessage(template, field, values) {
	    if (typeof template === 'function') {
	        return template(field, values);
	    }
	    return interpolate(template, __assign(__assign({}, values), { _field_: field }));
	}
	function fillTargetValues(params, crossTable) {
	    if (Array.isArray(params)) {
	        return params;
	    }
	    var values = {};
	    var normalize = function (value) {
	        if (isLocator(value)) {
	            return value(crossTable);
	        }
	        return value;
	    };
	    Object.keys(params).forEach(function (param) {
	        values[param] = normalize(params[param]);
	    });
	    return values;
	}

	var aggressive = function () { return ({
	    on: ['input', 'blur']
	}); };
	var lazy = function () { return ({
	    on: ['change']
	}); };
	var eager = function (_a) {
	    var errors = _a.errors;
	    if (errors.length) {
	        return {
	            on: ['input', 'change']
	        };
	    }
	    return {
	        on: ['change', 'blur']
	    };
	};
	var passive = function () { return ({
	    on: []
	}); };
	var modes = {
	    aggressive: aggressive,
	    eager: eager,
	    passive: passive,
	    lazy: lazy
	};

	var EVENT_BUS = new Vue();
	function localeChanged() {
	    EVENT_BUS.$emit('change:locale');
	}

	var Dictionary = /** @class */ (function () {
	    function Dictionary(locale, dictionary) {
	        this.container = {};
	        this.locale = locale;
	        this.merge(dictionary);
	    }
	    Dictionary.prototype.resolve = function (field, rule, values) {
	        return this.format(this.locale, field, rule, values);
	    };
	    Dictionary.prototype.format = function (locale, field, rule, values) {
	        var _a, _b, _c, _d, _e, _f, _g, _h;
	        var message;
	        // find if specific message for that field was specified.
	        message = ((_c = (_b = (_a = this.container[locale]) === null || _a === void 0 ? void 0 : _a.fields) === null || _b === void 0 ? void 0 : _b[field]) === null || _c === void 0 ? void 0 : _c[rule]) || ((_e = (_d = this.container[locale]) === null || _d === void 0 ? void 0 : _d.messages) === null || _e === void 0 ? void 0 : _e[rule]);
	        if (!message) {
	            message = '{_field_} is not valid';
	        }
	        field = (_h = (_g = (_f = this.container[locale]) === null || _f === void 0 ? void 0 : _f.names) === null || _g === void 0 ? void 0 : _g[field]) !== null && _h !== void 0 ? _h : field;
	        return isCallable(message) ? message(field, values) : interpolate(message, __assign(__assign({}, values), { _field_: field }));
	    };
	    Dictionary.prototype.merge = function (dictionary) {
	        merge(this.container, dictionary);
	    };
	    Dictionary.prototype.hasRule = function (name) {
	        var _a, _b;
	        return !!((_b = (_a = this.container[this.locale]) === null || _a === void 0 ? void 0 : _a.messages) === null || _b === void 0 ? void 0 : _b[name]);
	    };
	    return Dictionary;
	}());
	var DICTIONARY;
	function localize(locale, dictionary) {
	    var _a;
	    if (!DICTIONARY) {
	        DICTIONARY = new Dictionary('en', {});
	        setConfig({
	            defaultMessage: function (field, values) {
	                return DICTIONARY.resolve(field, values === null || values === void 0 ? void 0 : values._rule_, values || {});
	            }
	        });
	    }
	    if (typeof locale === 'string') {
	        DICTIONARY.locale = locale;
	        if (dictionary) {
	            DICTIONARY.merge((_a = {}, _a[locale] = dictionary, _a));
	        }
	        localeChanged();
	        return;
	    }
	    DICTIONARY.merge(locale);
	}

	var isEvent = function (evt) {
	    if (!evt) {
	        return false;
	    }
	    if (typeof Event !== 'undefined' && isCallable(Event) && evt instanceof Event) {
	        return true;
	    }
	    // this is for IE
	    /* istanbul ignore next */
	    if (evt && evt.srcElement) {
	        return true;
	    }
	    return false;
	};
	function normalizeEventValue(value) {
	    var _a, _b;
	    if (!isEvent(value)) {
	        return value;
	    }
	    var input = value.target;
	    if (input.type === 'file' && input.files) {
	        return toArray(input.files);
	    }
	    // If the input has a `v-model.number` modifier applied.
	    if ((_a = input._vModifiers) === null || _a === void 0 ? void 0 : _a.number) {
	        // as per the spec the v-model.number uses parseFloat
	        var valueAsNumber = parseFloat(input.value);
	        if (isNaN$1(valueAsNumber)) {
	            return input.value;
	        }
	        return valueAsNumber;
	    }
	    if ((_b = input._vModifiers) === null || _b === void 0 ? void 0 : _b.trim) {
	        var trimmedValue = typeof input.value === 'string' ? input.value.trim() : input.value;
	        return trimmedValue;
	    }
	    return input.value;
	}

	var isTextInput = function (vnode) {
	    var _a;
	    var attrs = ((_a = vnode.data) === null || _a === void 0 ? void 0 : _a.attrs) || vnode.elm;
	    // it will fallback to being a text input per browsers spec.
	    if (vnode.tag === 'input' && (!attrs || !attrs.type)) {
	        return true;
	    }
	    if (vnode.tag === 'textarea') {
	        return true;
	    }
	    return includes$5(['text', 'password', 'search', 'email', 'tel', 'url', 'number'], attrs === null || attrs === void 0 ? void 0 : attrs.type);
	};
	// export const isCheckboxOrRadioInput = (vnode: VNode): boolean => {
	//   const attrs = (vnode.data && vnode.data.attrs) || vnode.elm;
	//   return includes(['radio', 'checkbox'], attrs && attrs.type);
	// };
	// Gets the model object on the vnode.
	function findModel(vnode) {
	    if (!vnode.data) {
	        return undefined;
	    }
	    // Component Model
	    // THIS IS NOT TYPED IN OFFICIAL VUE TYPINGS
	    // eslint-disable-next-line
	    var nonStandardVNodeData = vnode.data;
	    if ('model' in nonStandardVNodeData) {
	        return nonStandardVNodeData.model;
	    }
	    if (!vnode.data.directives) {
	        return undefined;
	    }
	    return find(vnode.data.directives, function (d) { return d.name === 'model'; });
	}
	function findValue(vnode) {
	    var _a, _b;
	    var model = findModel(vnode);
	    if (model) {
	        return { value: model.value };
	    }
	    var config = findModelConfig(vnode);
	    var prop = (config === null || config === void 0 ? void 0 : config.prop) || 'value';
	    if (((_a = vnode.componentOptions) === null || _a === void 0 ? void 0 : _a.propsData) && prop in vnode.componentOptions.propsData) {
	        var propsDataWithValue = vnode.componentOptions.propsData;
	        return { value: propsDataWithValue[prop] };
	    }
	    if (((_b = vnode.data) === null || _b === void 0 ? void 0 : _b.domProps) && 'value' in vnode.data.domProps) {
	        return { value: vnode.data.domProps.value };
	    }
	    return undefined;
	}
	function extractChildren(vnode) {
	    if (Array.isArray(vnode)) {
	        return vnode;
	    }
	    if (Array.isArray(vnode.children)) {
	        return vnode.children;
	    }
	    /* istanbul ignore next */
	    if (vnode.componentOptions && Array.isArray(vnode.componentOptions.children)) {
	        return vnode.componentOptions.children;
	    }
	    return [];
	}
	function findInputNode(vnode) {
	    if (!Array.isArray(vnode) && findValue(vnode) !== undefined) {
	        return vnode;
	    }
	    var children = extractChildren(vnode);
	    return children.reduce(function (candidate, node) {
	        if (candidate) {
	            return candidate;
	        }
	        return findInputNode(node);
	    }, null);
	}
	// Resolves v-model config if exists.
	function findModelConfig(vnode) {
	    /* istanbul ignore next */
	    if (!vnode.componentOptions)
	        return null;
	    // This is also not typed in the standard Vue TS.
	    return vnode.componentOptions.Ctor.options.model;
	}
	// Adds a listener to vnode listener object.
	function mergeVNodeListeners(obj, eventName, handler) {
	    // no listener at all.
	    if (isNullOrUndefined(obj[eventName])) {
	        obj[eventName] = [handler];
	        return;
	    }
	    // Is an invoker.
	    if (isCallable(obj[eventName]) && obj[eventName].fns) {
	        var invoker = obj[eventName];
	        invoker.fns = Array.isArray(invoker.fns) ? invoker.fns : [invoker.fns];
	        if (!includes$5(invoker.fns, handler)) {
	            invoker.fns.push(handler);
	        }
	        return;
	    }
	    if (isCallable(obj[eventName])) {
	        var prev = obj[eventName];
	        obj[eventName] = [prev];
	    }
	    if (Array.isArray(obj[eventName]) && !includes$5(obj[eventName], handler)) {
	        obj[eventName].push(handler);
	    }
	}
	// Adds a listener to a native HTML vnode.
	function addNativeNodeListener(node, eventName, handler) {
	    /* istanbul ignore next */
	    if (!node.data) {
	        node.data = {};
	    }
	    if (isNullOrUndefined(node.data.on)) {
	        node.data.on = {};
	    }
	    mergeVNodeListeners(node.data.on, eventName, handler);
	}
	// Adds a listener to a Vue component vnode.
	function addComponentNodeListener(node, eventName, handler) {
	    /* istanbul ignore next */
	    if (!node.componentOptions) {
	        return;
	    }
	    /* istanbul ignore next */
	    if (!node.componentOptions.listeners) {
	        node.componentOptions.listeners = {};
	    }
	    mergeVNodeListeners(node.componentOptions.listeners, eventName, handler);
	}
	function addVNodeListener(vnode, eventName, handler) {
	    if (vnode.componentOptions) {
	        addComponentNodeListener(vnode, eventName, handler);
	        return;
	    }
	    addNativeNodeListener(vnode, eventName, handler);
	}
	// Determines if `change` should be used over `input` for listeners.
	function getInputEventName(vnode, model) {
	    var _a;
	    // Is a component.
	    if (vnode.componentOptions) {
	        var event_1 = (findModelConfig(vnode) || { event: 'input' }).event;
	        return event_1;
	    }
	    // Lazy Models typically use change event
	    if ((_a = model === null || model === void 0 ? void 0 : model.modifiers) === null || _a === void 0 ? void 0 : _a.lazy) {
	        return 'change';
	    }
	    // is a textual-type input.
	    if (isTextInput(vnode)) {
	        return 'input';
	    }
	    return 'change';
	}
	function isHTMLNode(node) {
	    return includes$5(['input', 'select', 'textarea'], node.tag);
	}
	function resolveTextualRules(vnode) {
	    var _a;
	    var attrs = (_a = vnode.data) === null || _a === void 0 ? void 0 : _a.attrs;
	    var rules = {};
	    if (!attrs)
	        return rules;
	    if (attrs.type === 'email' && RuleContainer.getRuleDefinition('email')) {
	        rules.email = ['multiple' in attrs];
	    }
	    if (attrs.pattern && RuleContainer.getRuleDefinition('regex')) {
	        rules.regex = attrs.pattern;
	    }
	    if (attrs.maxlength >= 0 && RuleContainer.getRuleDefinition('max')) {
	        rules.max = attrs.maxlength;
	    }
	    if (attrs.minlength >= 0 && RuleContainer.getRuleDefinition('min')) {
	        rules.min = attrs.minlength;
	    }
	    if (attrs.type === 'number') {
	        if (isSpecified(attrs.min) && RuleContainer.getRuleDefinition('min_value')) {
	            rules.min_value = Number(attrs.min);
	        }
	        if (isSpecified(attrs.max) && RuleContainer.getRuleDefinition('max_value')) {
	            rules.max_value = Number(attrs.max);
	        }
	    }
	    return rules;
	}
	function resolveRules(vnode) {
	    var _a;
	    var htmlTags = ['input', 'select', 'textarea'];
	    var attrs = (_a = vnode.data) === null || _a === void 0 ? void 0 : _a.attrs;
	    if (!includes$5(htmlTags, vnode.tag) || !attrs) {
	        return {};
	    }
	    var rules = {};
	    if ('required' in attrs && attrs.required !== false && RuleContainer.getRuleDefinition('required')) {
	        rules.required = attrs.type === 'checkbox' ? [true] : true;
	    }
	    if (isTextInput(vnode)) {
	        return normalizeRules(__assign(__assign({}, rules), resolveTextualRules(vnode)));
	    }
	    return normalizeRules(rules);
	}
	function normalizeChildren(context, slotProps) {
	    if (context.$scopedSlots.default) {
	        return context.$scopedSlots.default(slotProps) || [];
	    }
	    return context.$slots.default || [];
	}

	/**
	 * Determines if a provider needs to run validation.
	 */
	function shouldValidate(ctx, value) {
	    // when an immediate/initial validation is needed and wasn't done before.
	    if (!ctx._ignoreImmediate && ctx.immediate) {
	        return true;
	    }
	    // when the value changes for whatever reason.
	    if (!isRefEqual(ctx.value, value) && ctx.normalizedEvents.length) {
	        return true;
	    }
	    // when it needs validation due to props/cross-fields changes.
	    if (ctx._needsValidation) {
	        return true;
	    }
	    // when the initial value is undefined and the field wasn't rendered yet.
	    if (!ctx.initialized && value === undefined) {
	        return true;
	    }
	    return false;
	}
	function createValidationCtx(ctx) {
	    return __assign(__assign({}, ctx.flags), { errors: ctx.errors, classes: ctx.classes, failedRules: ctx.failedRules, reset: function () { return ctx.reset(); }, validate: function () {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i] = arguments[_i];
	            }
	            return ctx.validate.apply(ctx, args);
	        }, ariaInput: {
	            'aria-invalid': ctx.flags.invalid ? 'true' : 'false',
	            'aria-required': ctx.isRequired ? 'true' : 'false',
	            'aria-errormessage': "vee_" + ctx.id
	        }, ariaMsg: {
	            id: "vee_" + ctx.id,
	            'aria-live': ctx.errors.length ? 'assertive' : 'off'
	        } });
	}
	function onRenderUpdate(vm, value) {
	    if (!vm.initialized) {
	        vm.initialValue = value;
	    }
	    var validateNow = shouldValidate(vm, value);
	    vm._needsValidation = false;
	    vm.value = value;
	    vm._ignoreImmediate = true;
	    if (!validateNow) {
	        return;
	    }
	    var validate = function () {
	        if (vm.immediate || vm.flags.validated) {
	            return triggerThreadSafeValidation(vm);
	        }
	        vm.validateSilent();
	    };
	    if (vm.initialized) {
	        validate();
	        return;
	    }
	    vm.$once('hook:mounted', function () { return validate(); });
	}
	function computeModeSetting(ctx) {
	    var compute = (isCallable(ctx.mode) ? ctx.mode : modes[ctx.mode]);
	    return compute(ctx);
	}
	function triggerThreadSafeValidation(vm) {
	    var pendingPromise = vm.validateSilent();
	    // avoids race conditions between successive validations.
	    vm._pendingValidation = pendingPromise;
	    return pendingPromise.then(function (result) {
	        if (pendingPromise === vm._pendingValidation) {
	            vm.applyResult(result);
	            vm._pendingValidation = undefined;
	        }
	        return result;
	    });
	}
	// Creates the common handlers for a validatable context.
	function createCommonHandlers(vm) {
	    if (!vm.$veeOnInput) {
	        vm.$veeOnInput = function (e) {
	            vm.syncValue(e); // track and keep the value updated.
	            vm.setFlags({ dirty: true, pristine: false });
	        };
	    }
	    var onInput = vm.$veeOnInput;
	    if (!vm.$veeOnBlur) {
	        vm.$veeOnBlur = function () {
	            vm.setFlags({ touched: true, untouched: false });
	        };
	    }
	    // Blur event listener.
	    var onBlur = vm.$veeOnBlur;
	    var onValidate = vm.$veeHandler;
	    var mode = computeModeSetting(vm);
	    // Handle debounce changes.
	    if (!onValidate || vm.$veeDebounce !== vm.debounce) {
	        onValidate = debounce(function () {
	            vm.$nextTick(function () {
	                if (!vm._pendingReset) {
	                    triggerThreadSafeValidation(vm);
	                }
	                vm._pendingReset = false;
	            });
	        }, mode.debounce || vm.debounce);
	        // Cache the handler so we don't create it each time.
	        vm.$veeHandler = onValidate;
	        // cache the debounce value so we detect if it was changed.
	        vm.$veeDebounce = vm.debounce;
	    }
	    return { onInput: onInput, onBlur: onBlur, onValidate: onValidate };
	}
	// Adds all plugin listeners to the vnode.
	function addListeners(vm, node) {
	    var value = findValue(node);
	    // cache the input eventName.
	    vm._inputEventName = vm._inputEventName || getInputEventName(node, findModel(node));
	    onRenderUpdate(vm, value === null || value === void 0 ? void 0 : value.value);
	    var _a = createCommonHandlers(vm), onInput = _a.onInput, onBlur = _a.onBlur, onValidate = _a.onValidate;
	    addVNodeListener(node, vm._inputEventName, onInput);
	    addVNodeListener(node, 'blur', onBlur);
	    // add the validation listeners.
	    vm.normalizedEvents.forEach(function (evt) {
	        addVNodeListener(node, evt, onValidate);
	    });
	    vm.initialized = true;
	}

	var PROVIDER_COUNTER = 0;
	function data$1() {
	    var errors = [];
	    var fieldName = '';
	    var defaultValues = {
	        errors: errors,
	        value: undefined,
	        initialized: false,
	        initialValue: undefined,
	        flags: createFlags(),
	        failedRules: {},
	        isActive: true,
	        fieldName: fieldName,
	        id: ''
	    };
	    return defaultValues;
	}
	var ValidationProvider = Vue.extend({
	    inject: {
	        $_veeObserver: {
	            from: '$_veeObserver',
	            default: function () {
	                if (!this.$vnode.context.$_veeObserver) {
	                    this.$vnode.context.$_veeObserver = createObserver();
	                }
	                return this.$vnode.context.$_veeObserver;
	            }
	        }
	    },
	    props: {
	        vid: {
	            type: String,
	            default: ''
	        },
	        name: {
	            type: String,
	            default: null
	        },
	        mode: {
	            type: [String, Function],
	            default: function () {
	                return getConfig().mode;
	            }
	        },
	        rules: {
	            type: [Object, String],
	            default: null
	        },
	        immediate: {
	            type: Boolean,
	            default: false
	        },
	        bails: {
	            type: Boolean,
	            default: function () { return getConfig().bails; }
	        },
	        skipIfEmpty: {
	            type: Boolean,
	            default: function () { return getConfig().skipOptional; }
	        },
	        debounce: {
	            type: Number,
	            default: 0
	        },
	        tag: {
	            type: String,
	            default: 'span'
	        },
	        slim: {
	            type: Boolean,
	            default: false
	        },
	        disabled: {
	            type: Boolean,
	            default: false
	        },
	        customMessages: {
	            type: Object,
	            default: function () {
	                return {};
	            }
	        }
	    },
	    watch: {
	        rules: {
	            deep: true,
	            handler: function (val, oldVal) {
	                this._needsValidation = !isEqual(val, oldVal);
	            }
	        }
	    },
	    data: data$1,
	    computed: {
	        fieldDeps: function () {
	            var _this = this;
	            return Object.keys(this.normalizedRules).reduce(function (acc, rule) {
	                var deps = extractLocators(_this.normalizedRules[rule]).map(function (dep) { return dep.__locatorRef; });
	                acc.push.apply(acc, deps);
	                deps.forEach(function (depName) {
	                    watchCrossFieldDep(_this, depName);
	                });
	                return acc;
	            }, []);
	        },
	        normalizedEvents: function () {
	            var _this = this;
	            var on = computeModeSetting(this).on;
	            return (on || []).map(function (e) {
	                if (e === 'input') {
	                    return _this._inputEventName;
	                }
	                return e;
	            });
	        },
	        isRequired: function () {
	            var rules = __assign(__assign({}, this._resolvedRules), this.normalizedRules);
	            var isRequired = Object.keys(rules).some(RuleContainer.isRequireRule);
	            this.flags.required = !!isRequired;
	            return isRequired;
	        },
	        classes: function () {
	            var names = getConfig().classes;
	            return computeClassObj(names, this.flags);
	        },
	        normalizedRules: function () {
	            return normalizeRules(this.rules);
	        }
	    },
	    mounted: function () {
	        var _this = this;
	        var onLocaleChanged = function () {
	            if (!_this.flags.validated) {
	                return;
	            }
	            var regenerateMap = _this._regenerateMap;
	            if (regenerateMap) {
	                var errors_1 = [];
	                var failedRules_1 = {};
	                Object.keys(regenerateMap).forEach(function (rule) {
	                    var msg = regenerateMap[rule]();
	                    errors_1.push(msg);
	                    failedRules_1[rule] = msg;
	                });
	                _this.applyResult({ errors: errors_1, failedRules: failedRules_1, regenerateMap: regenerateMap });
	                return;
	            }
	            _this.validate();
	        };
	        EVENT_BUS.$on('change:locale', onLocaleChanged);
	        this.$on('hook:beforeDestroy', function () {
	            EVENT_BUS.$off('change:locale', onLocaleChanged);
	        });
	    },
	    render: function (h) {
	        var _a, _b, _c, _d;
	        this.registerField();
	        var ctx = createValidationCtx(this);
	        var children = normalizeChildren(this, ctx);
	        var input = findInputNode(children);
	        if (!input) {
	            // Silent exit if no input was found.
	            return this.slim && children.length <= 1 ? children[0] : h(this.tag, children);
	        }
	        var resolved = getConfig().useConstraintAttrs ? resolveRules(input) : {};
	        if (!isEqual(this._resolvedRules, resolved)) {
	            this._needsValidation = true;
	        }
	        if (isHTMLNode(input)) {
	            this.fieldName = ((_b = (_a = input.data) === null || _a === void 0 ? void 0 : _a.attrs) === null || _b === void 0 ? void 0 : _b.name) || ((_d = (_c = input.data) === null || _c === void 0 ? void 0 : _c.attrs) === null || _d === void 0 ? void 0 : _d.id);
	        }
	        this._resolvedRules = resolved;
	        addListeners(this, input);
	        return this.slim && children.length <= 1 ? children[0] : h(this.tag, children);
	    },
	    beforeDestroy: function () {
	        // cleanup reference.
	        this.$_veeObserver.unobserve(this.id);
	    },
	    activated: function () {
	        this.isActive = true;
	    },
	    deactivated: function () {
	        this.isActive = false;
	    },
	    methods: {
	        setFlags: function (flags) {
	            var _this = this;
	            Object.keys(flags).forEach(function (flag) {
	                _this.flags[flag] = flags[flag];
	            });
	        },
	        syncValue: function (v) {
	            var value = normalizeEventValue(v);
	            this.value = value;
	            this.flags.changed = this.initialValue !== value;
	        },
	        reset: function () {
	            var _this = this;
	            this.errors = [];
	            this.initialValue = this.value;
	            var flags = createFlags();
	            flags.required = this.isRequired;
	            this.setFlags(flags);
	            this.failedRules = {};
	            this.validateSilent();
	            this._pendingValidation = undefined;
	            this._pendingReset = true;
	            setTimeout(function () {
	                _this._pendingReset = false;
	            }, this.debounce);
	        },
	        validate: function () {
	            var args = [];
	            for (var _i = 0; _i < arguments.length; _i++) {
	                args[_i] = arguments[_i];
	            }
	            return __awaiter(this, void 0, void 0, function () {
	                return __generator(this, function (_a) {
	                    if (args.length > 0) {
	                        this.syncValue(args[0]);
	                    }
	                    return [2 /*return*/, triggerThreadSafeValidation(this)];
	                });
	            });
	        },
	        validateSilent: function () {
	            return __awaiter(this, void 0, void 0, function () {
	                var rules, result;
	                return __generator(this, function (_a) {
	                    switch (_a.label) {
	                        case 0:
	                            this.setFlags({ pending: true });
	                            rules = __assign(__assign({}, this._resolvedRules), this.normalizedRules);
	                            Object.defineProperty(rules, '_$$isNormalized', {
	                                value: true,
	                                writable: false,
	                                enumerable: false,
	                                configurable: false
	                            });
	                            return [4 /*yield*/, validate(this.value, rules, __assign(__assign({ name: this.name || this.fieldName }, createLookup(this)), { bails: this.bails, skipIfEmpty: this.skipIfEmpty, isInitial: !this.initialized, customMessages: this.customMessages }))];
	                        case 1:
	                            result = _a.sent();
	                            this.setFlags({
	                                pending: false,
	                                valid: result.valid,
	                                invalid: !result.valid
	                            });
	                            return [2 /*return*/, result];
	                    }
	                });
	            });
	        },
	        setErrors: function (errors) {
	            this.applyResult({ errors: errors, failedRules: {} });
	        },
	        applyResult: function (_a) {
	            var errors = _a.errors, failedRules = _a.failedRules, regenerateMap = _a.regenerateMap;
	            this.errors = errors;
	            this._regenerateMap = regenerateMap;
	            this.failedRules = __assign({}, (failedRules || {}));
	            this.setFlags({
	                valid: !errors.length,
	                passed: !errors.length,
	                invalid: !!errors.length,
	                failed: !!errors.length,
	                validated: true,
	                changed: this.value !== this.initialValue
	            });
	        },
	        registerField: function () {
	            updateRenderingContextRefs(this);
	        }
	    }
	});
	function computeClassObj(names, flags) {
	    var acc = {};
	    var keys = Object.keys(flags);
	    var length = keys.length;
	    var _loop_1 = function (i) {
	        var flag = keys[i];
	        var className = (names && names[flag]) || flag;
	        var value = flags[flag];
	        if (isNullOrUndefined(value)) {
	            return "continue";
	        }
	        if ((flag === 'valid' || flag === 'invalid') && !flags.validated) {
	            return "continue";
	        }
	        if (typeof className === 'string') {
	            acc[className] = value;
	        }
	        else if (Array.isArray(className)) {
	            className.forEach(function (cls) {
	                acc[cls] = value;
	            });
	        }
	    };
	    for (var i = 0; i < length; i++) {
	        _loop_1(i);
	    }
	    return acc;
	}
	function createLookup(vm) {
	    var providers = vm.$_veeObserver.refs;
	    var reduced = {
	        names: {},
	        values: {}
	    };
	    return vm.fieldDeps.reduce(function (acc, depName) {
	        if (!providers[depName]) {
	            return acc;
	        }
	        acc.values[depName] = providers[depName].value;
	        acc.names[depName] = providers[depName].name;
	        return acc;
	    }, reduced);
	}
	function extractId(vm) {
	    if (vm.vid) {
	        return vm.vid;
	    }
	    if (vm.name) {
	        return vm.name;
	    }
	    if (vm.id) {
	        return vm.id;
	    }
	    if (vm.fieldName) {
	        return vm.fieldName;
	    }
	    PROVIDER_COUNTER++;
	    return "_vee_" + PROVIDER_COUNTER;
	}
	function updateRenderingContextRefs(vm) {
	    var providedId = extractId(vm);
	    var id = vm.id;
	    // Nothing has changed.
	    if (!vm.isActive || (id === providedId && vm.$_veeObserver.refs[id])) {
	        return;
	    }
	    // vid was changed.
	    if (id !== providedId && vm.$_veeObserver.refs[id] === vm) {
	        vm.$_veeObserver.unobserve(id);
	    }
	    vm.id = providedId;
	    vm.$_veeObserver.observe(vm);
	}
	function createObserver() {
	    return {
	        refs: {},
	        observe: function (vm) {
	            this.refs[vm.id] = vm;
	        },
	        unobserve: function (id) {
	            delete this.refs[id];
	        }
	    };
	}
	function watchCrossFieldDep(ctx, depName, withHooks) {
	    if (withHooks === void 0) { withHooks = true; }
	    var providers = ctx.$_veeObserver.refs;
	    if (!ctx._veeWatchers) {
	        ctx._veeWatchers = {};
	    }
	    if (!providers[depName] && withHooks) {
	        return ctx.$once('hook:mounted', function () {
	            watchCrossFieldDep(ctx, depName, false);
	        });
	    }
	    if (!isCallable(ctx._veeWatchers[depName]) && providers[depName]) {
	        ctx._veeWatchers[depName] = providers[depName].$watch('value', function () {
	            if (ctx.flags.validated) {
	                ctx._needsValidation = true;
	                ctx.validate();
	            }
	        });
	    }
	}

	var FLAGS_STRATEGIES = [
	    ['pristine', 'every'],
	    ['dirty', 'some'],
	    ['touched', 'some'],
	    ['untouched', 'every'],
	    ['valid', 'every'],
	    ['invalid', 'some'],
	    ['pending', 'some'],
	    ['validated', 'every'],
	    ['changed', 'some'],
	    ['passed', 'every'],
	    ['failed', 'some']
	];
	var OBSERVER_COUNTER = 0;
	function data$1$1() {
	    var refs = {};
	    var errors = {};
	    var flags = createObserverFlags();
	    var fields = {};
	    // FIXME: Not sure of this one can be typed, circular type reference.
	    var observers = [];
	    return {
	        id: '',
	        refs: refs,
	        observers: observers,
	        errors: errors,
	        flags: flags,
	        fields: fields
	    };
	}
	function provideSelf() {
	    return {
	        $_veeObserver: this
	    };
	}
	var ValidationObserver = Vue.extend({
	    name: 'ValidationObserver',
	    provide: provideSelf,
	    inject: {
	        $_veeObserver: {
	            from: '$_veeObserver',
	            default: function () {
	                if (!this.$vnode.context.$_veeObserver) {
	                    return null;
	                }
	                return this.$vnode.context.$_veeObserver;
	            }
	        }
	    },
	    props: {
	        tag: {
	            type: String,
	            default: 'span'
	        },
	        vid: {
	            type: String,
	            default: function () {
	                return "obs_" + OBSERVER_COUNTER++;
	            }
	        },
	        slim: {
	            type: Boolean,
	            default: false
	        },
	        disabled: {
	            type: Boolean,
	            default: false
	        }
	    },
	    data: data$1$1,
	    created: function () {
	        var _this = this;
	        this.id = this.vid;
	        register(this);
	        var onChange = debounce(function (_a) {
	            var errors = _a.errors, flags = _a.flags, fields = _a.fields;
	            _this.errors = errors;
	            _this.flags = flags;
	            _this.fields = fields;
	        }, 16);
	        this.$watch(computeObserverState, onChange);
	    },
	    activated: function () {
	        register(this);
	    },
	    deactivated: function () {
	        unregister(this);
	    },
	    beforeDestroy: function () {
	        unregister(this);
	    },
	    render: function (h) {
	        var children = normalizeChildren(this, prepareSlotProps(this));
	        return this.slim && children.length <= 1 ? children[0] : h(this.tag, { on: this.$listeners }, children);
	    },
	    methods: {
	        observe: function (subscriber, kind) {
	            var _a;
	            if (kind === void 0) { kind = 'provider'; }
	            if (kind === 'observer') {
	                this.observers.push(subscriber);
	                return;
	            }
	            this.refs = __assign(__assign({}, this.refs), (_a = {}, _a[subscriber.id] = subscriber, _a));
	        },
	        unobserve: function (id, kind) {
	            if (kind === void 0) { kind = 'provider'; }
	            if (kind === 'provider') {
	                var provider = this.refs[id];
	                if (!provider) {
	                    return;
	                }
	                this.$delete(this.refs, id);
	                return;
	            }
	            var idx = findIndex$3(this.observers, function (o) { return o.id === id; });
	            if (idx !== -1) {
	                this.observers.splice(idx, 1);
	            }
	        },
	        validate: function (_a) {
	            var _b = (_a === void 0 ? {} : _a).silent, silent = _b === void 0 ? false : _b;
	            return __awaiter(this, void 0, void 0, function () {
	                var results;
	                return __generator(this, function (_c) {
	                    switch (_c.label) {
	                        case 0: return [4 /*yield*/, Promise.all(__spreadArrays(values(this.refs)
	                                .filter(function (r) { return !r.disabled; })
	                                .map(function (ref) { return ref[silent ? 'validateSilent' : 'validate']().then(function (r) { return r.valid; }); }), this.observers.filter(function (o) { return !o.disabled; }).map(function (obs) { return obs.validate({ silent: silent }); })))];
	                        case 1:
	                            results = _c.sent();
	                            return [2 /*return*/, results.every(function (r) { return r; })];
	                    }
	                });
	            });
	        },
	        handleSubmit: function (cb) {
	            return __awaiter(this, void 0, void 0, function () {
	                var isValid;
	                return __generator(this, function (_a) {
	                    switch (_a.label) {
	                        case 0: return [4 /*yield*/, this.validate()];
	                        case 1:
	                            isValid = _a.sent();
	                            if (!isValid || !cb) {
	                                return [2 /*return*/];
	                            }
	                            return [2 /*return*/, cb()];
	                    }
	                });
	            });
	        },
	        reset: function () {
	            return __spreadArrays(values(this.refs), this.observers).forEach(function (ref) { return ref.reset(); });
	        },
	        setErrors: function (errors) {
	            var _this = this;
	            Object.keys(errors).forEach(function (key) {
	                var provider = _this.refs[key];
	                if (!provider)
	                    return;
	                var errorArr = errors[key] || [];
	                errorArr = typeof errorArr === 'string' ? [errorArr] : errorArr;
	                provider.setErrors(errorArr);
	            });
	            this.observers.forEach(function (observer) {
	                observer.setErrors(errors);
	            });
	        }
	    }
	});
	function unregister(vm) {
	    if (vm.$_veeObserver) {
	        vm.$_veeObserver.unobserve(vm.id, 'observer');
	    }
	}
	function register(vm) {
	    if (vm.$_veeObserver) {
	        vm.$_veeObserver.observe(vm, 'observer');
	    }
	}
	function prepareSlotProps(vm) {
	    return __assign(__assign({}, vm.flags), { errors: vm.errors, fields: vm.fields, validate: vm.validate, passes: vm.handleSubmit, handleSubmit: vm.handleSubmit, reset: vm.reset });
	}
	// Creates a modified version of validation flags
	function createObserverFlags() {
	    return __assign(__assign({}, createFlags()), { valid: true, invalid: false });
	}
	function computeObserverState() {
	    var vms = __spreadArrays(values(this.refs), this.observers);
	    var errors = {};
	    var flags = createObserverFlags();
	    var fields = {};
	    var length = vms.length;
	    for (var i = 0; i < length; i++) {
	        var vm = vms[i];
	        // validation provider
	        if (Array.isArray(vm.errors)) {
	            errors[vm.id] = vm.errors;
	            fields[vm.id] = __assign({ id: vm.id, name: vm.name, failedRules: vm.failedRules }, vm.flags);
	            continue;
	        }
	        // Nested observer, merge errors and fields
	        errors = __assign(__assign({}, errors), vm.errors);
	        fields = __assign(__assign({}, fields), vm.fields);
	    }
	    FLAGS_STRATEGIES.forEach(function (_a) {
	        var flag = _a[0], method = _a[1];
	        flags[flag] = vms[method](function (vm) { return vm.flags[flag]; });
	    });
	    return { errors: errors, flags: flags, fields: fields };
	}

	var validator$1 = function validator() {
	  this.name = 'validator';
	  this.locale = 'en';
	  this.messages = {};
	  this.rules = {};

	  this.addRule = function (key, v) {
	    var focre = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

	    if (this.rules[key] && !focre) {
	      console.log('[maxilo-vue validator warning]rules is exist: ' + key);
	      return;
	    } else {
	      if (!v.validate) {
	        console.log('[maxilo-vue validator warning]rule validate is not find: ' + key);
	        return;
	      }

	      if (!v.message) {
	        v.message = '{_field_} Error.';
	      }

	      this.rules[key] = v;
	      extend(key, v);
	    }
	  };

	  this.addRules = function (rs) {
	    var _this = this;

	    if (utils.tool.getType(rs) == 'Object') {
	      var _context;

	      forEach$2(_context = keys$3(rs)).call(_context, function (i) {
	        _this.addRuke(i, rs[i]);
	      });
	    } else if (utils.tool.getType(mix) == 'Array') {
	      forEach$2(rs).call(rs, function (v) {
	        if (v.ruleKey && v, ruleBuild) {
	          _this.addRule(v.ruleKey, v.ruleBuild);
	        }
	      });
	    }
	  };

	  this.addLocalize = function (key, v) {
	    this.messages[key] = v;
	  };

	  this.addLocalizes = function (ls) {
	    this.messages = utils.tool.merge(this.messages, ls);
	  };

	  this.run = function (app) {
	    var _context2,
	        _this2 = this;

	    forEach$2(_context2 = keys$3(this.messages)).call(_context2, function (k) {
	      return localize(k, {
	        name: k,
	        messages: _this2.messages[k]
	      });
	    });

	    app.make("vue").component('ValidationProvider', ValidationProvider);
	    app.make("vue").component('ValidationObserver', ValidationObserver);
	    localize(app.make("config").locale);
	  };
	};

	function validator$2 () {
	  this.register = function (app) {
	    bind$4(app).call(app, "validator", function (app) {
	      return new validator$1();
	    });
	  };

	  this.boot = function (app) {
	    app.make("validator").run(app);
	  };
	}

	function http () {
	  this.register = function (app) {
	    bind$4(app).call(app, "http", function (app) {
	      return axios.create({
	        baseURL: app.make("config").baseURL
	      });
	    });
	  };

	  this.boot = function (app) {
	    defineProperty$7(app.vue.prototype, '$http', {
	      get: function get() {
	        return app.make("http");
	      }
	    });
	  };
	}

	var config = function config() {
	  var _context,
	      _this = this;

	  this.cs = {
	    debug: true,
	    locale: 'zh_cn',
	    baseURL: '/',
	    storeKey: 'fuf8u18uhf1huif13uhif2'
	  };

	  forEach$2(_context = keys$3(this.cs)).call(_context, function (v) {
	    defineProperty$7(_this, v, {
	      get: function get() {
	        return this.cs[v];
	      },
	      set: function set(val) {
	        this.cs[v] = val;
	      }
	    });
	  });

	  this.add = function (key, v) {
	    if (this.cs[key] === undefined) {
	      defineProperty$7(this, key, {
	        get: function get() {
	          return v;
	        },
	        set: function set(val) {
	          this.cs[key] = v;
	        }
	      });
	    }

	    this.cs[key] = v;
	  };

	  this.merge = function (obj) {
	    var _context2,
	        _this2 = this;

	    forEach$2(_context2 = keys$3(obj)).call(_context2, function (v) {
	      if (!_this2.cs[v]) {
	        _this2.add(v, obj[v]);
	      } else {
	        _this2.cs[v] = obj[v];
	      }
	    });
	  };
	};

	function config$1 () {
	  this.register = function (app) {
	    bind$4(app).call(app, "config", function () {
	      return new config();
	    });
	  };

	  this.boot = function (app) {
	    defineProperty$7(app.vue.prototype, '$configs', {
	      get: function get() {
	        return app.make("config");
	      }
	    });
	  };
	}

	var utils$1 = function utils$1() {
	  var _context4,
	      _this2 = this;

	  this.depBind = function (hi) {
	    var _context,
	        _this = this;

	    var tmp = {};

	    forEach$2(_context = keys$3(hi)).call(_context, function (v) {
	      if (utils.tool.getType(hi[v]) == 'Object') {
	        _this.depBind(hi[v]);
	      } else {
	        var _context2;

	        tmp[v] = bind$4(_context2 = function _context2() {
	          var _hi$v, _context3;

	          return (_hi$v = hi[v]).call.apply(_hi$v, concat$2(_context3 = [this]).call(_context3, slice$5(Array.prototype).call(arguments)));
	        }).call(_context2, _this);
	      }
	    });

	    return tmp;
	  };

	  this.utilMap = utils;

	  forEach$2(_context4 = keys$3(this.utilMap)).call(_context4, function (v) {
	    defineProperty$7(_this2, v, {
	      get: function get() {
	        return _this2.utilMap[v];
	      }
	    });
	  });

	  this.add = function (namespace, func) {
	    var _this3 = this;

	    var bind = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

	    if (!utils.tool.isString(namespace) || namespace == '') {
	      return;
	    }

	    var tmp = namespace.split('.');
	    var native = ['add', 'utilMap', 'run', 'depNameSpace'];

	    if (includes$4(native)[tmp[0]]) {
	      alert(native.join(',') + ' 均为utils根保留关键字, 添加被拒绝.');
	      return;
	    }

	    if (tmp.length == 1 && !this.utilMap[tmp[0]]) {
	      var k = tmp[0];
	      this.utilMap[k] = func;

	      defineProperty$7(this, k, {
	        get: function get() {
	          var _context5;

	          return bind ? bind$4(_context5 = function _context5() {
	            var _this$utilMap$k, _context6;

	            return (_this$utilMap$k = this.utilMap[k]).call.apply(_this$utilMap$k, concat$2(_context6 = [this]).call(_context6, slice$5(Array.prototype).call(arguments)));
	          }).call(_context5, _this3) : _this3.utilMap[k];
	        }
	      });

	      return;
	    }

	    this.depNameSpace(this.utilMap, tmp, func, bind);
	  };

	  this.run = function (vue) {
	    var _this4 = this;

	    defineProperty$7(vue.prototype, '$utils', {
	      get: function get() {
	        return _this4.utilMap;
	      }
	    });
	  };

	  this.depNameSpace = function (target, space, func) {
	    var bind = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
	    var len = space.length;

	    if (len === 1) {
	      var _context7;

	      target[space[0]] = bind ? bind$4(_context7 = function _context7() {
	        var _context8;

	        return func.call.apply(func, concat$2(_context8 = [this]).call(_context8, slice$5(Array.prototype).call(arguments)));
	      }).call(_context7, this) : func;
	    } else {
	      if (!target[space[0]]) {
	        target[space[0]] = {};
	      }

	      this.depNameSpace(target[space[0]], slice$5(space).call(space, 1, len), func, bind);
	    }
	  };
	};

	function utilsClass () {
	  this.register = function (app) {
	    bind$4(app).call(app, "utils", function (app) {
	      return new utils$1();
	    });
	  };

	  this.boot = function (app) {
	    app.make("utils").run(app.vue);
	  };
	}

	var vue = function vue() {
	  this.name = 'vue';
	  this.instance = null;
	  this.components = {};
	  this.uses = [];
	  this.errorHandler = false;
	  this.warnHandler = false;

	  this.component = function (name, component) {
	    if (!utils.tool.isString(name) || name == '') {
	      if (utils.tool.getType(name) == 'Object' && name.name) {
	        name = name.name;
	      } else {
	        return;
	      }
	    }

	    this.components[name] = component;
	  };

	  this.depComponent = function (mix) {
	    var _this = this;

	    if (utils.tool.getType(mix) == 'Object') {
	      var _context;

	      if (mix.__file || mix._compiled || mix.functional || mix._scopeId) {
	        this.component(mix.name, mix);
	        return;
	      }

	      forEach$2(_context = keys$3(mix)).call(_context, function (i) {
	        if (utils.tool.getType(mix[i]) == 'Object') {
	          if (mix[i].__file || mix[i]._compiled || mix[i].functional || mix[i]._scopeId) {
	            _this.component(i, mix[i]);
	          } else {
	            _this.depComponent(mix[i]);
	          }
	        } else if (utils.tool.getType(mix[i]) == 'Array') {
	          _this.depComponent(mix[i]);
	        }
	      });
	    } else if (utils.tool.getType(mix) == 'Array') {
	      forEach$2(mix).call(mix, function (v) {
	        return _this.depComponent(v);
	      });
	    }
	  };

	  this.use = function (t, param) {
	    this.uses.push([t, param]);
	  };

	  this.run = function (vuep, debug) {
	    var _context2,
	        _this2 = this,
	        _context3;

	    this.instance = vuep;

	    if (debug && this.errorHandler) {
	      vuep.config.errorHandler = this.errorHandler;
	    }

	    if (debug && this.warnHandler) {
	      vuep.config.warnHandler = this.warnHandler;
	    }

	    vuep.config.performance = debug;
	    vuep.config.devtools = debug;

	    forEach$2(_context2 = keys$3(this.components)).call(_context2, function (i) {
	      return vuep.component(i, _this2.components[i]);
	    });

	    forEach$2(_context3 = this.uses).call(_context3, function (v) {
	      return vuep.use(v[0], v[1]);
	    });
	  };
	};

	function vue$1 () {
	  this.register = function (app) {
	    bind$4(app).call(app, "vue", function (app) {
	      return new vue();
	    });
	  };

	  this.boot = function (app) {
	    app.make("vue").run(app.vue, app.make("config").debug);
	  };
	}

	var maxiloVueModule = new maxiloVue();

	try {
	  maxiloVueModule.register(new config$1());
	  maxiloVueModule.register(new utilsClass());
	  maxiloVueModule.register(new store$3());
	  maxiloVueModule.register(new router$1());
	  maxiloVueModule.register(new i18n());
	  maxiloVueModule.register(new validator$2());
	  maxiloVueModule.register(new http());
	  maxiloVueModule.register(new vue$1());
	} catch (error) {
	  utils.system.notice(error);
	}

	var index = (function () {
	  return maxiloVueModule;
	})();

	return index;

})));
